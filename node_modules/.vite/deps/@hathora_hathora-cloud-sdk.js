import "./chunk-BKDDKEDW.js";

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/runtime.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var BASE_PATH = "https://api.hathora.dev".replace(/\/+$/, "");
var Configuration = class {
  constructor(configuration = {}) {
    this.configuration = configuration;
  }
  set config(configuration) {
    this.configuration = configuration;
  }
  get basePath() {
    return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;
  }
  get fetchApi() {
    return this.configuration.fetchApi;
  }
  get middleware() {
    return this.configuration.middleware || [];
  }
  get queryParamsStringify() {
    return this.configuration.queryParamsStringify || querystring;
  }
  get username() {
    return this.configuration.username;
  }
  get password() {
    return this.configuration.password;
  }
  get apiKey() {
    const apiKey = this.configuration.apiKey;
    if (apiKey) {
      return typeof apiKey === "function" ? apiKey : () => apiKey;
    }
    return void 0;
  }
  get accessToken() {
    const accessToken = this.configuration.accessToken;
    if (accessToken) {
      return typeof accessToken === "function" ? accessToken : () => __awaiter(this, void 0, void 0, function* () {
        return accessToken;
      });
    }
    return void 0;
  }
  get headers() {
    return this.configuration.headers;
  }
  get credentials() {
    return this.configuration.credentials;
  }
};
var DefaultConfig = new Configuration();
var BaseAPI = class _BaseAPI {
  constructor(configuration = DefaultConfig) {
    this.configuration = configuration;
    this.fetchApi = (url, init) => __awaiter(this, void 0, void 0, function* () {
      let fetchParams = { url, init };
      for (const middleware of this.middleware) {
        if (middleware.pre) {
          fetchParams = (yield middleware.pre(Object.assign({ fetch: this.fetchApi }, fetchParams))) || fetchParams;
        }
      }
      let response = void 0;
      try {
        response = yield (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);
      } catch (e) {
        for (const middleware of this.middleware) {
          if (middleware.onError) {
            response = (yield middleware.onError({
              fetch: this.fetchApi,
              url: fetchParams.url,
              init: fetchParams.init,
              error: e,
              response: response ? response.clone() : void 0
            })) || response;
          }
        }
        if (response === void 0) {
          if (e instanceof Error) {
            throw new FetchError(e, "The request failed and the interceptors did not return an alternative response");
          } else {
            throw e;
          }
        }
      }
      for (const middleware of this.middleware) {
        if (middleware.post) {
          response = (yield middleware.post({
            fetch: this.fetchApi,
            url: fetchParams.url,
            init: fetchParams.init,
            response: response.clone()
          })) || response;
        }
      }
      return response;
    });
    this.middleware = configuration.middleware;
  }
  withMiddleware(...middlewares) {
    const next = this.clone();
    next.middleware = next.middleware.concat(...middlewares);
    return next;
  }
  withPreMiddleware(...preMiddlewares) {
    const middlewares = preMiddlewares.map((pre) => ({ pre }));
    return this.withMiddleware(...middlewares);
  }
  withPostMiddleware(...postMiddlewares) {
    const middlewares = postMiddlewares.map((post) => ({ post }));
    return this.withMiddleware(...middlewares);
  }
  /**
   * Check if the given MIME is a JSON MIME.
   * JSON MIME examples:
   *   application/json
   *   application/json; charset=UTF8
   *   APPLICATION/JSON
   *   application/vnd.company+json
   * @param mime - MIME (Multipurpose Internet Mail Extensions)
   * @return True if the given MIME is JSON, false otherwise.
   */
  isJsonMime(mime) {
    if (!mime) {
      return false;
    }
    return _BaseAPI.jsonRegex.test(mime);
  }
  request(context, initOverrides) {
    return __awaiter(this, void 0, void 0, function* () {
      const { url, init } = yield this.createFetchParams(context, initOverrides);
      const response = yield this.fetchApi(url, init);
      if (response && (response.status >= 200 && response.status < 300)) {
        return response;
      }
      throw new ResponseError(response, "Response returned an error code");
    });
  }
  createFetchParams(context, initOverrides) {
    return __awaiter(this, void 0, void 0, function* () {
      let url = this.configuration.basePath + context.path;
      if (context.query !== void 0 && Object.keys(context.query).length !== 0) {
        url += "?" + this.configuration.queryParamsStringify(context.query);
      }
      const headers = Object.assign({}, this.configuration.headers, context.headers);
      Object.keys(headers).forEach((key) => headers[key] === void 0 ? delete headers[key] : {});
      const initOverrideFn = typeof initOverrides === "function" ? initOverrides : () => __awaiter(this, void 0, void 0, function* () {
        return initOverrides;
      });
      const initParams = {
        method: context.method,
        headers,
        body: context.body,
        credentials: this.configuration.credentials
      };
      const overriddenInit = Object.assign(Object.assign({}, initParams), yield initOverrideFn({
        init: initParams,
        context
      }));
      const init = Object.assign(Object.assign({}, overriddenInit), { body: isFormData(overriddenInit.body) || overriddenInit.body instanceof URLSearchParams || isBlob(overriddenInit.body) ? overriddenInit.body : JSON.stringify(overriddenInit.body) });
      return { url, init };
    });
  }
  /**
   * Create a shallow clone of `this` by constructing a new instance
   * and then shallow cloning data members.
   */
  clone() {
    const constructor = this.constructor;
    const next = new constructor(this.configuration);
    next.middleware = this.middleware.slice();
    return next;
  }
};
BaseAPI.jsonRegex = new RegExp("^(:?application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(:?;.*)?$", "i");
function isBlob(value) {
  return typeof Blob !== "undefined" && value instanceof Blob;
}
function isFormData(value) {
  return typeof FormData !== "undefined" && value instanceof FormData;
}
var ResponseError = class extends Error {
  constructor(response, msg) {
    super(msg);
    this.response = response;
    this.name = "ResponseError";
  }
};
var FetchError = class extends Error {
  constructor(cause, msg) {
    super(msg);
    this.cause = cause;
    this.name = "FetchError";
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};
var COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "	",
  pipes: "|"
};
function exists(json, key) {
  const value = json[key];
  return value !== null && value !== void 0;
}
function querystring(params, prefix = "") {
  return Object.keys(params).map((key) => querystringSingleKey(key, params[key], prefix)).filter((part) => part.length > 0).join("&");
}
function querystringSingleKey(key, value, keyPrefix = "") {
  const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);
  if (value instanceof Array) {
    const multiValue = value.map((singleValue) => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);
    return `${encodeURIComponent(fullKey)}=${multiValue}`;
  }
  if (value instanceof Set) {
    const valueAsArray = Array.from(value);
    return querystringSingleKey(key, valueAsArray, keyPrefix);
  }
  if (value instanceof Date) {
    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
  }
  if (value instanceof Object) {
    return querystring(value, fullKey);
  }
  return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
}
function mapValues(data, fn) {
  return Object.keys(data).reduce((acc, key) => Object.assign(Object.assign({}, acc), { [key]: fn(data[key]) }), {});
}
function canConsumeForm(consumes) {
  for (const consume of consumes) {
    if ("multipart/form-data" === consume.contentType) {
      return true;
    }
  }
  return false;
}
var JSONApiResponse = class {
  constructor(raw, transformer = (jsonValue) => jsonValue) {
    this.raw = raw;
    this.transformer = transformer;
  }
  value() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.transformer(yield this.raw.json());
    });
  }
};
var VoidApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  value() {
    return __awaiter(this, void 0, void 0, function* () {
      return void 0;
    });
  }
};
var BlobApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  value() {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.raw.blob();
    });
  }
};
var TextApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  value() {
    return __awaiter(this, void 0, void 0, function* () {
      return yield this.raw.text();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/AchPaymentMethod.js
function instanceOfAchPaymentMethod(value) {
  let isInstance = true;
  return isInstance;
}
function AchPaymentMethodFromJSON(json) {
  return AchPaymentMethodFromJSONTyped(json, false);
}
function AchPaymentMethodFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "last4": !exists(json, "last4") ? void 0 : json["last4"],
    "bankName": !exists(json, "bankName") ? void 0 : json["bankName"]
  };
}
function AchPaymentMethodToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "last4": value.last4,
    "bankName": value.bankName
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/TransportType.js
var TransportType = {
  Tcp: "tcp",
  Udp: "udp",
  Tls: "tls"
};
function TransportTypeFromJSON(json) {
  return TransportTypeFromJSONTyped(json, false);
}
function TransportTypeFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function TransportTypeToJSON(value) {
  return value;
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ActiveConnectionInfo.js
var ActiveConnectionInfoStatusEnum = {
  Active: "active"
};
function instanceOfActiveConnectionInfo(value) {
  let isInstance = true;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "transportType" in value;
  isInstance = isInstance && "port" in value;
  isInstance = isInstance && "host" in value;
  isInstance = isInstance && "roomId" in value;
  return isInstance;
}
function ActiveConnectionInfoFromJSON(json) {
  return ActiveConnectionInfoFromJSONTyped(json, false);
}
function ActiveConnectionInfoFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "status": json["status"],
    "transportType": TransportTypeFromJSON(json["transportType"]),
    "port": json["port"],
    "host": json["host"],
    "roomId": json["roomId"]
  };
}
function ActiveConnectionInfoToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "status": value.status,
    "transportType": TransportTypeToJSON(value.transportType),
    "port": value.port,
    "host": value.host,
    "roomId": value.roomId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ApplicationAuthConfigurationGoogle.js
function instanceOfApplicationAuthConfigurationGoogle(value) {
  let isInstance = true;
  isInstance = isInstance && "clientId" in value;
  return isInstance;
}
function ApplicationAuthConfigurationGoogleFromJSON(json) {
  return ApplicationAuthConfigurationGoogleFromJSONTyped(json, false);
}
function ApplicationAuthConfigurationGoogleFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "clientId": json["clientId"]
  };
}
function ApplicationAuthConfigurationGoogleToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "clientId": value.clientId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/AppConfigAuthConfiguration.js
function instanceOfAppConfigAuthConfiguration(value) {
  let isInstance = true;
  return isInstance;
}
function AppConfigAuthConfigurationFromJSON(json) {
  return AppConfigAuthConfigurationFromJSONTyped(json, false);
}
function AppConfigAuthConfigurationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "google": !exists(json, "google") ? void 0 : ApplicationAuthConfigurationGoogleFromJSON(json["google"]),
    "nickname": !exists(json, "nickname") ? void 0 : json["nickname"],
    "anonymous": !exists(json, "anonymous") ? void 0 : json["anonymous"]
  };
}
function AppConfigAuthConfigurationToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "google": ApplicationAuthConfigurationGoogleToJSON(value.google),
    "nickname": value.nickname,
    "anonymous": value.anonymous
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/AppConfig.js
function instanceOfAppConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "authConfiguration" in value;
  isInstance = isInstance && "appName" in value;
  return isInstance;
}
function AppConfigFromJSON(json) {
  return AppConfigFromJSONTyped(json, false);
}
function AppConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "authConfiguration": AppConfigAuthConfigurationFromJSON(json["authConfiguration"]),
    "appName": json["appName"]
  };
}
function AppConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "authConfiguration": AppConfigAuthConfigurationToJSON(value.authConfiguration),
    "appName": value.appName
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ApplicationAuthConfiguration.js
function instanceOfApplicationAuthConfiguration(value) {
  let isInstance = true;
  return isInstance;
}
function ApplicationAuthConfigurationFromJSON(json) {
  return ApplicationAuthConfigurationFromJSONTyped(json, false);
}
function ApplicationAuthConfigurationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "google": !exists(json, "google") ? void 0 : ApplicationAuthConfigurationGoogleFromJSON(json["google"]),
    "nickname": !exists(json, "nickname") ? void 0 : json["nickname"],
    "anonymous": !exists(json, "anonymous") ? void 0 : json["anonymous"]
  };
}
function ApplicationAuthConfigurationToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "google": ApplicationAuthConfigurationGoogleToJSON(value.google),
    "nickname": value.nickname,
    "anonymous": value.anonymous
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/Application.js
function instanceOfApplication(value) {
  let isInstance = true;
  isInstance = isInstance && "deletedBy" in value;
  isInstance = isInstance && "deletedAt" in value;
  isInstance = isInstance && "createdAt" in value;
  isInstance = isInstance && "createdBy" in value;
  isInstance = isInstance && "orgId" in value;
  isInstance = isInstance && "authConfiguration" in value;
  isInstance = isInstance && "appSecret" in value;
  isInstance = isInstance && "appId" in value;
  isInstance = isInstance && "appName" in value;
  return isInstance;
}
function ApplicationFromJSON(json) {
  return ApplicationFromJSONTyped(json, false);
}
function ApplicationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "deletedBy": json["deletedBy"],
    "deletedAt": json["deletedAt"] === null ? null : new Date(json["deletedAt"]),
    "createdAt": new Date(json["createdAt"]),
    "createdBy": json["createdBy"],
    "orgId": json["orgId"],
    "authConfiguration": ApplicationAuthConfigurationFromJSON(json["authConfiguration"]),
    "appSecret": json["appSecret"],
    "appId": json["appId"],
    "appName": json["appName"]
  };
}
function ApplicationToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "deletedBy": value.deletedBy,
    "deletedAt": value.deletedAt === null ? null : value.deletedAt.toISOString(),
    "createdAt": value.createdAt.toISOString(),
    "createdBy": value.createdBy,
    "orgId": value.orgId,
    "authConfiguration": ApplicationAuthConfigurationToJSON(value.authConfiguration),
    "appSecret": value.appSecret,
    "appId": value.appId,
    "appName": value.appName
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ContainerPort.js
function instanceOfContainerPort(value) {
  let isInstance = true;
  isInstance = isInstance && "transportType" in value;
  isInstance = isInstance && "port" in value;
  isInstance = isInstance && "name" in value;
  return isInstance;
}
function ContainerPortFromJSON(json) {
  return ContainerPortFromJSONTyped(json, false);
}
function ContainerPortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "transportType": TransportTypeFromJSON(json["transportType"]),
    "port": json["port"],
    "name": json["name"]
  };
}
function ContainerPortToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "transportType": TransportTypeToJSON(value.transportType),
    "port": value.port,
    "name": value.name
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/DeploymentEnvInner.js
function instanceOfDeploymentEnvInner(value) {
  let isInstance = true;
  isInstance = isInstance && "value" in value;
  isInstance = isInstance && "name" in value;
  return isInstance;
}
function DeploymentEnvInnerFromJSON(json) {
  return DeploymentEnvInnerFromJSONTyped(json, false);
}
function DeploymentEnvInnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "value": json["value"],
    "name": json["name"]
  };
}
function DeploymentEnvInnerToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "value": value.value,
    "name": value.name
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/PlanName.js
var PlanName = {
  Tiny: "tiny",
  Small: "small",
  Medium: "medium",
  Large: "large"
};
function PlanNameFromJSON(json) {
  return PlanNameFromJSONTyped(json, false);
}
function PlanNameFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function PlanNameToJSON(value) {
  return value;
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/Deployment.js
var DeploymentTransportTypeEnum = {
  Tcp: "tcp",
  Udp: "udp",
  Tls: "tls"
};
function instanceOfDeployment(value) {
  let isInstance = true;
  isInstance = isInstance && "env" in value;
  isInstance = isInstance && "roomsPerProcess" in value;
  isInstance = isInstance && "planName" in value;
  isInstance = isInstance && "additionalContainerPorts" in value;
  isInstance = isInstance && "defaultContainerPort" in value;
  isInstance = isInstance && "transportType" in value;
  isInstance = isInstance && "containerPort" in value;
  isInstance = isInstance && "createdAt" in value;
  isInstance = isInstance && "createdBy" in value;
  isInstance = isInstance && "requestedMemoryMB" in value;
  isInstance = isInstance && "requestedCPU" in value;
  isInstance = isInstance && "deploymentId" in value;
  isInstance = isInstance && "buildId" in value;
  isInstance = isInstance && "appId" in value;
  return isInstance;
}
function DeploymentFromJSON(json) {
  return DeploymentFromJSONTyped(json, false);
}
function DeploymentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "env": json["env"].map(DeploymentEnvInnerFromJSON),
    "roomsPerProcess": json["roomsPerProcess"],
    "planName": PlanNameFromJSON(json["planName"]),
    "additionalContainerPorts": json["additionalContainerPorts"].map(ContainerPortFromJSON),
    "defaultContainerPort": ContainerPortFromJSON(json["defaultContainerPort"]),
    "transportType": json["transportType"],
    "containerPort": json["containerPort"],
    "createdAt": new Date(json["createdAt"]),
    "createdBy": json["createdBy"],
    "requestedMemoryMB": json["requestedMemoryMB"],
    "requestedCPU": json["requestedCPU"],
    "deploymentId": json["deploymentId"],
    "buildId": json["buildId"],
    "appId": json["appId"]
  };
}
function DeploymentToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "env": value.env.map(DeploymentEnvInnerToJSON),
    "roomsPerProcess": value.roomsPerProcess,
    "planName": PlanNameToJSON(value.planName),
    "additionalContainerPorts": value.additionalContainerPorts.map(ContainerPortToJSON),
    "defaultContainerPort": ContainerPortToJSON(value.defaultContainerPort),
    "transportType": value.transportType,
    "containerPort": value.containerPort,
    "createdAt": value.createdAt.toISOString(),
    "createdBy": value.createdBy,
    "requestedMemoryMB": value.requestedMemoryMB,
    "requestedCPU": value.requestedCPU,
    "deploymentId": value.deploymentId,
    "buildId": value.buildId,
    "appId": value.appId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ApplicationWithDeployment.js
function instanceOfApplicationWithDeployment(value) {
  let isInstance = true;
  isInstance = isInstance && "deletedBy" in value;
  isInstance = isInstance && "deletedAt" in value;
  isInstance = isInstance && "createdAt" in value;
  isInstance = isInstance && "createdBy" in value;
  isInstance = isInstance && "orgId" in value;
  isInstance = isInstance && "authConfiguration" in value;
  isInstance = isInstance && "appSecret" in value;
  isInstance = isInstance && "appId" in value;
  isInstance = isInstance && "appName" in value;
  isInstance = isInstance && "deployment" in value;
  return isInstance;
}
function ApplicationWithDeploymentFromJSON(json) {
  return ApplicationWithDeploymentFromJSONTyped(json, false);
}
function ApplicationWithDeploymentFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "deletedBy": json["deletedBy"],
    "deletedAt": json["deletedAt"] === null ? null : new Date(json["deletedAt"]),
    "createdAt": new Date(json["createdAt"]),
    "createdBy": json["createdBy"],
    "orgId": json["orgId"],
    "authConfiguration": ApplicationAuthConfigurationFromJSON(json["authConfiguration"]),
    "appSecret": json["appSecret"],
    "appId": json["appId"],
    "appName": json["appName"],
    "deployment": DeploymentFromJSON(json["deployment"])
  };
}
function ApplicationWithDeploymentToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "deletedBy": value.deletedBy,
    "deletedAt": value.deletedAt === null ? null : value.deletedAt.toISOString(),
    "createdAt": value.createdAt.toISOString(),
    "createdBy": value.createdBy,
    "orgId": value.orgId,
    "authConfiguration": ApplicationAuthConfigurationToJSON(value.authConfiguration),
    "appSecret": value.appSecret,
    "appId": value.appId,
    "appName": value.appName,
    "deployment": DeploymentToJSON(value.deployment)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ApplicationWithDeploymentAllOf.js
function instanceOfApplicationWithDeploymentAllOf(value) {
  let isInstance = true;
  isInstance = isInstance && "deployment" in value;
  return isInstance;
}
function ApplicationWithDeploymentAllOfFromJSON(json) {
  return ApplicationWithDeploymentAllOfFromJSONTyped(json, false);
}
function ApplicationWithDeploymentAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "deployment": DeploymentFromJSON(json["deployment"])
  };
}
function ApplicationWithDeploymentAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "deployment": DeploymentToJSON(value.deployment)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/Region.js
var Region = {
  Seattle: "Seattle",
  WashingtonDc: "Washington_DC",
  Chicago: "Chicago",
  London: "London",
  Frankfurt: "Frankfurt",
  Mumbai: "Mumbai",
  Singapore: "Singapore",
  Tokyo: "Tokyo",
  Sydney: "Sydney",
  SaoPaulo: "Sao_Paulo"
};
function RegionFromJSON(json) {
  return RegionFromJSONTyped(json, false);
}
function RegionFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function RegionToJSON(value) {
  return value;
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/BuildRegionalContainerTagsInner.js
function instanceOfBuildRegionalContainerTagsInner(value) {
  let isInstance = true;
  isInstance = isInstance && "containerTag" in value;
  isInstance = isInstance && "region" in value;
  return isInstance;
}
function BuildRegionalContainerTagsInnerFromJSON(json) {
  return BuildRegionalContainerTagsInnerFromJSONTyped(json, false);
}
function BuildRegionalContainerTagsInnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "containerTag": json["containerTag"],
    "region": RegionFromJSON(json["region"])
  };
}
function BuildRegionalContainerTagsInnerToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "containerTag": value.containerTag,
    "region": RegionToJSON(value.region)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/Build.js
var BuildStatusEnum = {
  Created: "created",
  Running: "running",
  Succeeded: "succeeded",
  Failed: "failed"
};
function instanceOfBuild(value) {
  let isInstance = true;
  isInstance = isInstance && "regionalContainerTags" in value;
  isInstance = isInstance && "imageSize" in value;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "deletedAt" in value;
  isInstance = isInstance && "finishedAt" in value;
  isInstance = isInstance && "startedAt" in value;
  isInstance = isInstance && "createdAt" in value;
  isInstance = isInstance && "createdBy" in value;
  isInstance = isInstance && "buildId" in value;
  isInstance = isInstance && "appId" in value;
  return isInstance;
}
function BuildFromJSON(json) {
  return BuildFromJSONTyped(json, false);
}
function BuildFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "regionalContainerTags": json["regionalContainerTags"].map(BuildRegionalContainerTagsInnerFromJSON),
    "imageSize": json["imageSize"],
    "status": json["status"],
    "deletedAt": json["deletedAt"] === null ? null : new Date(json["deletedAt"]),
    "finishedAt": json["finishedAt"] === null ? null : new Date(json["finishedAt"]),
    "startedAt": json["startedAt"] === null ? null : new Date(json["startedAt"]),
    "createdAt": new Date(json["createdAt"]),
    "createdBy": json["createdBy"],
    "buildId": json["buildId"],
    "appId": json["appId"]
  };
}
function BuildToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "regionalContainerTags": value.regionalContainerTags.map(BuildRegionalContainerTagsInnerToJSON),
    "imageSize": value.imageSize,
    "status": value.status,
    "deletedAt": value.deletedAt === null ? null : value.deletedAt.toISOString(),
    "finishedAt": value.finishedAt === null ? null : value.finishedAt.toISOString(),
    "startedAt": value.startedAt === null ? null : value.startedAt.toISOString(),
    "createdAt": value.createdAt.toISOString(),
    "createdBy": value.createdBy,
    "buildId": value.buildId,
    "appId": value.appId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/CardBrand.js
var CardBrand = {
  Amex: "amex",
  CartesBancaires: "cartes_bancaires",
  Diners: "diners",
  Discover: "discover",
  Jcb: "jcb",
  Mastercard: "mastercard",
  Visa: "visa",
  Unionpay: "unionpay",
  Card: "card"
};
function CardBrandFromJSON(json) {
  return CardBrandFromJSONTyped(json, false);
}
function CardBrandFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function CardBrandToJSON(value) {
  return value;
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/CardPaymentMethod.js
function instanceOfCardPaymentMethod(value) {
  let isInstance = true;
  isInstance = isInstance && "last4" in value;
  isInstance = isInstance && "brand" in value;
  return isInstance;
}
function CardPaymentMethodFromJSON(json) {
  return CardPaymentMethodFromJSONTyped(json, false);
}
function CardPaymentMethodFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "last4": json["last4"],
    "brand": CardBrandFromJSON(json["brand"])
  };
}
function CardPaymentMethodToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "last4": value.last4,
    "brand": CardBrandToJSON(value.brand)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ConnectionInfo.js
var ConnectionInfoStatusEnum = {
  Active: "active"
};
function instanceOfConnectionInfo(value) {
  let isInstance = true;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "roomId" in value;
  isInstance = isInstance && "transportType" in value;
  isInstance = isInstance && "port" in value;
  isInstance = isInstance && "host" in value;
  return isInstance;
}
function ConnectionInfoFromJSON(json) {
  return ConnectionInfoFromJSONTyped(json, false);
}
function ConnectionInfoFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "status": json["status"],
    "roomId": json["roomId"],
    "transportType": TransportTypeFromJSON(json["transportType"]),
    "port": json["port"],
    "host": json["host"]
  };
}
function ConnectionInfoToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "status": value.status,
    "roomId": value.roomId,
    "transportType": TransportTypeToJSON(value.transportType),
    "port": value.port,
    "host": value.host
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ExposedPort.js
function instanceOfExposedPort(value) {
  let isInstance = true;
  isInstance = isInstance && "transportType" in value;
  isInstance = isInstance && "port" in value;
  isInstance = isInstance && "host" in value;
  isInstance = isInstance && "name" in value;
  return isInstance;
}
function ExposedPortFromJSON(json) {
  return ExposedPortFromJSONTyped(json, false);
}
function ExposedPortFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "transportType": TransportTypeFromJSON(json["transportType"]),
    "port": json["port"],
    "host": json["host"],
    "name": json["name"]
  };
}
function ExposedPortToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "transportType": TransportTypeToJSON(value.transportType),
    "port": value.port,
    "host": value.host,
    "name": value.name
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ConnectionInfoV2.js
var ConnectionInfoV2StatusEnum = {
  Starting: "starting",
  Active: "active"
};
function instanceOfConnectionInfoV2(value) {
  let isInstance = true;
  isInstance = isInstance && "additionalExposedPorts" in value;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "roomId" in value;
  return isInstance;
}
function ConnectionInfoV2FromJSON(json) {
  return ConnectionInfoV2FromJSONTyped(json, false);
}
function ConnectionInfoV2FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "additionalExposedPorts": json["additionalExposedPorts"].map(ExposedPortFromJSON),
    "exposedPort": !exists(json, "exposedPort") ? void 0 : ExposedPortFromJSON(json["exposedPort"]),
    "status": json["status"],
    "roomId": json["roomId"]
  };
}
function ConnectionInfoV2ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "additionalExposedPorts": value.additionalExposedPorts.map(ExposedPortToJSON),
    "exposedPort": ExposedPortToJSON(value.exposedPort),
    "status": value.status,
    "roomId": value.roomId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/LobbyVisibility.js
var LobbyVisibility = {
  Private: "private",
  Public: "public",
  Local: "local"
};
function LobbyVisibilityFromJSON(json) {
  return LobbyVisibilityFromJSONTyped(json, false);
}
function LobbyVisibilityFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function LobbyVisibilityToJSON(value) {
  return value;
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/CreateLobbyRequest.js
function instanceOfCreateLobbyRequest(value) {
  let isInstance = true;
  isInstance = isInstance && "visibility" in value;
  isInstance = isInstance && "initialConfig" in value;
  isInstance = isInstance && "region" in value;
  return isInstance;
}
function CreateLobbyRequestFromJSON(json) {
  return CreateLobbyRequestFromJSONTyped(json, false);
}
function CreateLobbyRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "visibility": LobbyVisibilityFromJSON(json["visibility"]),
    "initialConfig": json["initialConfig"],
    "region": RegionFromJSON(json["region"])
  };
}
function CreateLobbyRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "visibility": LobbyVisibilityToJSON(value.visibility),
    "initialConfig": value.initialConfig,
    "region": RegionToJSON(value.region)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/CreatePrivateLobbyRequest.js
function instanceOfCreatePrivateLobbyRequest(value) {
  let isInstance = true;
  isInstance = isInstance && "initialConfig" in value;
  isInstance = isInstance && "region" in value;
  return isInstance;
}
function CreatePrivateLobbyRequestFromJSON(json) {
  return CreatePrivateLobbyRequestFromJSONTyped(json, false);
}
function CreatePrivateLobbyRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "initialConfig": json["initialConfig"],
    "region": RegionFromJSON(json["region"])
  };
}
function CreatePrivateLobbyRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "initialConfig": value.initialConfig,
    "region": RegionToJSON(value.region)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/CreateRoomRequest.js
function instanceOfCreateRoomRequest(value) {
  let isInstance = true;
  isInstance = isInstance && "region" in value;
  return isInstance;
}
function CreateRoomRequestFromJSON(json) {
  return CreateRoomRequestFromJSONTyped(json, false);
}
function CreateRoomRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "region": RegionFromJSON(json["region"])
  };
}
function CreateRoomRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "region": RegionToJSON(value.region)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/CustomerPortalUrl.js
function instanceOfCustomerPortalUrl(value) {
  let isInstance = true;
  isInstance = isInstance && "returnUrl" in value;
  return isInstance;
}
function CustomerPortalUrlFromJSON(json) {
  return CustomerPortalUrlFromJSONTyped(json, false);
}
function CustomerPortalUrlFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "returnUrl": json["returnUrl"]
  };
}
function CustomerPortalUrlToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "returnUrl": value.returnUrl
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/DeploymentConfig.js
function instanceOfDeploymentConfig(value) {
  let isInstance = true;
  isInstance = isInstance && "env" in value;
  isInstance = isInstance && "roomsPerProcess" in value;
  isInstance = isInstance && "planName" in value;
  isInstance = isInstance && "transportType" in value;
  isInstance = isInstance && "containerPort" in value;
  return isInstance;
}
function DeploymentConfigFromJSON(json) {
  return DeploymentConfigFromJSONTyped(json, false);
}
function DeploymentConfigFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "env": json["env"].map(DeploymentEnvInnerFromJSON),
    "roomsPerProcess": json["roomsPerProcess"],
    "planName": PlanNameFromJSON(json["planName"]),
    "additionalContainerPorts": !exists(json, "additionalContainerPorts") ? void 0 : json["additionalContainerPorts"].map(ContainerPortFromJSON),
    "transportType": TransportTypeFromJSON(json["transportType"]),
    "containerPort": json["containerPort"]
  };
}
function DeploymentConfigToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "env": value.env.map(DeploymentEnvInnerToJSON),
    "roomsPerProcess": value.roomsPerProcess,
    "planName": PlanNameToJSON(value.planName),
    "additionalContainerPorts": value.additionalContainerPorts === void 0 ? void 0 : value.additionalContainerPorts.map(ContainerPortToJSON),
    "transportType": TransportTypeToJSON(value.transportType),
    "containerPort": value.containerPort
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/DiscoveryResponseInner.js
function instanceOfDiscoveryResponseInner(value) {
  let isInstance = true;
  isInstance = isInstance && "port" in value;
  isInstance = isInstance && "host" in value;
  isInstance = isInstance && "region" in value;
  return isInstance;
}
function DiscoveryResponseInnerFromJSON(json) {
  return DiscoveryResponseInnerFromJSONTyped(json, false);
}
function DiscoveryResponseInnerFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "port": json["port"],
    "host": json["host"],
    "region": RegionFromJSON(json["region"])
  };
}
function DiscoveryResponseInnerToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "port": value.port,
    "host": value.host,
    "region": RegionToJSON(value.region)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/Invoice.js
var InvoiceStatusEnum = {
  Pending: "pending",
  Paid: "paid",
  Overdue: "overdue"
};
function instanceOfInvoice(value) {
  let isInstance = true;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "amountDue" in value;
  isInstance = isInstance && "pdfUrl" in value;
  isInstance = isInstance && "dueDate" in value;
  isInstance = isInstance && "year" in value;
  isInstance = isInstance && "month" in value;
  isInstance = isInstance && "id" in value;
  return isInstance;
}
function InvoiceFromJSON(json) {
  return InvoiceFromJSONTyped(json, false);
}
function InvoiceFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "status": json["status"],
    "amountDue": json["amountDue"],
    "pdfUrl": json["pdfUrl"],
    "dueDate": new Date(json["dueDate"]),
    "year": json["year"],
    "month": json["month"],
    "id": json["id"]
  };
}
function InvoiceToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "status": value.status,
    "amountDue": value.amountDue,
    "pdfUrl": value.pdfUrl,
    "dueDate": value.dueDate.toISOString(),
    "year": value.year,
    "month": value.month,
    "id": value.id
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/LinkPaymentMethod.js
function instanceOfLinkPaymentMethod(value) {
  let isInstance = true;
  return isInstance;
}
function LinkPaymentMethodFromJSON(json) {
  return LinkPaymentMethodFromJSONTyped(json, false);
}
function LinkPaymentMethodFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "email": !exists(json, "email") ? void 0 : json["email"]
  };
}
function LinkPaymentMethodToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "email": value.email
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/Lobby.js
function instanceOfLobby(value) {
  let isInstance = true;
  isInstance = isInstance && "initialConfig" in value;
  isInstance = isInstance && "createdAt" in value;
  isInstance = isInstance && "createdBy" in value;
  isInstance = isInstance && "local" in value;
  isInstance = isInstance && "visibility" in value;
  isInstance = isInstance && "region" in value;
  isInstance = isInstance && "roomId" in value;
  isInstance = isInstance && "appId" in value;
  return isInstance;
}
function LobbyFromJSON(json) {
  return LobbyFromJSONTyped(json, false);
}
function LobbyFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "state": !exists(json, "state") ? void 0 : json["state"],
    "initialConfig": json["initialConfig"],
    "createdAt": new Date(json["createdAt"]),
    "createdBy": json["createdBy"],
    "local": json["local"],
    "visibility": LobbyVisibilityFromJSON(json["visibility"]),
    "region": RegionFromJSON(json["region"]),
    "roomId": json["roomId"],
    "appId": json["appId"]
  };
}
function LobbyToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "state": value.state,
    "initialConfig": value.initialConfig,
    "createdAt": value.createdAt.toISOString(),
    "createdBy": value.createdBy,
    "local": value.local,
    "visibility": LobbyVisibilityToJSON(value.visibility),
    "region": RegionToJSON(value.region),
    "roomId": value.roomId,
    "appId": value.appId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/LoginGoogleRequest.js
function instanceOfLoginGoogleRequest(value) {
  let isInstance = true;
  isInstance = isInstance && "idToken" in value;
  return isInstance;
}
function LoginGoogleRequestFromJSON(json) {
  return LoginGoogleRequestFromJSONTyped(json, false);
}
function LoginGoogleRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "idToken": json["idToken"]
  };
}
function LoginGoogleRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "idToken": value.idToken
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/LoginNicknameRequest.js
function instanceOfLoginNicknameRequest(value) {
  let isInstance = true;
  isInstance = isInstance && "nickname" in value;
  return isInstance;
}
function LoginNicknameRequestFromJSON(json) {
  return LoginNicknameRequestFromJSONTyped(json, false);
}
function LoginNicknameRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "nickname": json["nickname"]
  };
}
function LoginNicknameRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "nickname": value.nickname
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/LoginResponse.js
function instanceOfLoginResponse(value) {
  let isInstance = true;
  isInstance = isInstance && "token" in value;
  return isInstance;
}
function LoginResponseFromJSON(json) {
  return LoginResponseFromJSONTyped(json, false);
}
function LoginResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "token": json["token"]
  };
}
function LoginResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "token": value.token
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/MetricName.js
var MetricName = {
  Cpu: "cpu",
  Memory: "memory",
  RateEgress: "rate_egress",
  TotalEgress: "total_egress"
};
function MetricNameFromJSON(json) {
  return MetricNameFromJSONTyped(json, false);
}
function MetricNameFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function MetricNameToJSON(value) {
  return value;
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/MetricValue.js
function instanceOfMetricValue(value) {
  let isInstance = true;
  isInstance = isInstance && "value" in value;
  isInstance = isInstance && "timestamp" in value;
  return isInstance;
}
function MetricValueFromJSON(json) {
  return MetricValueFromJSONTyped(json, false);
}
function MetricValueFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "value": json["value"],
    "timestamp": json["timestamp"]
  };
}
function MetricValueToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "value": value.value,
    "timestamp": value.timestamp
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod.js
function instanceOfPartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod(value) {
  let isInstance = true;
  return isInstance;
}
function PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethodFromJSON(json) {
  return PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethodFromJSONTyped(json, false);
}
function PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethodFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "card": !exists(json, "card") ? void 0 : CardPaymentMethodFromJSON(json["card"]),
    "ach": !exists(json, "ach") ? void 0 : AchPaymentMethodFromJSON(json["ach"]),
    "link": !exists(json, "link") ? void 0 : LinkPaymentMethodFromJSON(json["link"])
  };
}
function PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethodToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "card": CardPaymentMethodToJSON(value.card),
    "ach": AchPaymentMethodToJSON(value.ach),
    "link": LinkPaymentMethodToJSON(value.link)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/RoomAllocation.js
function instanceOfRoomAllocation(value) {
  let isInstance = true;
  isInstance = isInstance && "unscheduledAt" in value;
  isInstance = isInstance && "scheduledAt" in value;
  isInstance = isInstance && "processId" in value;
  isInstance = isInstance && "roomAllocationId" in value;
  return isInstance;
}
function RoomAllocationFromJSON(json) {
  return RoomAllocationFromJSONTyped(json, false);
}
function RoomAllocationFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "unscheduledAt": json["unscheduledAt"] === null ? null : new Date(json["unscheduledAt"]),
    "scheduledAt": new Date(json["scheduledAt"]),
    "processId": json["processId"],
    "roomAllocationId": json["roomAllocationId"]
  };
}
function RoomAllocationToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "unscheduledAt": value.unscheduledAt === null ? null : value.unscheduledAt.toISOString(),
    "scheduledAt": value.scheduledAt.toISOString(),
    "processId": value.processId,
    "roomAllocationId": value.roomAllocationId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/RoomStatus.js
var RoomStatus = {
  Scheduling: "scheduling",
  Active: "active",
  Suspended: "suspended",
  Destroyed: "destroyed"
};
function RoomStatusFromJSON(json) {
  return RoomStatusFromJSONTyped(json, false);
}
function RoomStatusFromJSONTyped(json, ignoreDiscriminator) {
  return json;
}
function RoomStatusToJSON(value) {
  return value;
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/PickRoomExcludeKeyofRoomAllocations.js
function instanceOfPickRoomExcludeKeyofRoomAllocations(value) {
  let isInstance = true;
  isInstance = isInstance && "appId" in value;
  isInstance = isInstance && "roomId" in value;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "currentAllocation" in value;
  return isInstance;
}
function PickRoomExcludeKeyofRoomAllocationsFromJSON(json) {
  return PickRoomExcludeKeyofRoomAllocationsFromJSONTyped(json, false);
}
function PickRoomExcludeKeyofRoomAllocationsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "appId": json["appId"],
    "roomId": json["roomId"],
    "status": RoomStatusFromJSON(json["status"]),
    "currentAllocation": RoomAllocationFromJSON(json["currentAllocation"])
  };
}
function PickRoomExcludeKeyofRoomAllocationsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "appId": value.appId,
    "roomId": value.roomId,
    "status": RoomStatusToJSON(value.status),
    "currentAllocation": RoomAllocationToJSON(value.currentAllocation)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/Process.js
function instanceOfProcess(value) {
  let isInstance = true;
  isInstance = isInstance && "egressedBytes" in value;
  isInstance = isInstance && "idleSince" in value;
  isInstance = isInstance && "activeConnectionsUpdatedAt" in value;
  isInstance = isInstance && "activeConnections" in value;
  isInstance = isInstance && "roomSlotsAvailableUpdatedAt" in value;
  isInstance = isInstance && "roomSlotsAvailable" in value;
  isInstance = isInstance && "draining" in value;
  isInstance = isInstance && "terminatedAt" in value;
  isInstance = isInstance && "stoppingAt" in value;
  isInstance = isInstance && "startedAt" in value;
  isInstance = isInstance && "startingAt" in value;
  isInstance = isInstance && "roomsPerProcess" in value;
  isInstance = isInstance && "additionalExposedPorts" in value;
  isInstance = isInstance && "port" in value;
  isInstance = isInstance && "host" in value;
  isInstance = isInstance && "region" in value;
  isInstance = isInstance && "processId" in value;
  isInstance = isInstance && "deploymentId" in value;
  isInstance = isInstance && "appId" in value;
  return isInstance;
}
function ProcessFromJSON(json) {
  return ProcessFromJSONTyped(json, false);
}
function ProcessFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "egressedBytes": json["egressedBytes"],
    "idleSince": json["idleSince"] === null ? null : new Date(json["idleSince"]),
    "activeConnectionsUpdatedAt": new Date(json["activeConnectionsUpdatedAt"]),
    "activeConnections": json["activeConnections"],
    "roomSlotsAvailableUpdatedAt": new Date(json["roomSlotsAvailableUpdatedAt"]),
    "roomSlotsAvailable": json["roomSlotsAvailable"],
    "draining": json["draining"],
    "terminatedAt": json["terminatedAt"] === null ? null : new Date(json["terminatedAt"]),
    "stoppingAt": json["stoppingAt"] === null ? null : new Date(json["stoppingAt"]),
    "startedAt": json["startedAt"] === null ? null : new Date(json["startedAt"]),
    "startingAt": new Date(json["startingAt"]),
    "roomsPerProcess": json["roomsPerProcess"],
    "additionalExposedPorts": json["additionalExposedPorts"].map(ExposedPortFromJSON),
    "exposedPort": !exists(json, "exposedPort") ? void 0 : ExposedPortFromJSON(json["exposedPort"]),
    "port": json["port"],
    "host": json["host"],
    "region": RegionFromJSON(json["region"]),
    "processId": json["processId"],
    "deploymentId": json["deploymentId"],
    "appId": json["appId"]
  };
}
function ProcessToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "egressedBytes": value.egressedBytes,
    "idleSince": value.idleSince === null ? null : value.idleSince.toISOString(),
    "activeConnectionsUpdatedAt": value.activeConnectionsUpdatedAt.toISOString(),
    "activeConnections": value.activeConnections,
    "roomSlotsAvailableUpdatedAt": value.roomSlotsAvailableUpdatedAt.toISOString(),
    "roomSlotsAvailable": value.roomSlotsAvailable,
    "draining": value.draining,
    "terminatedAt": value.terminatedAt === null ? null : value.terminatedAt.toISOString(),
    "stoppingAt": value.stoppingAt === null ? null : value.stoppingAt.toISOString(),
    "startedAt": value.startedAt === null ? null : value.startedAt.toISOString(),
    "startingAt": value.startingAt.toISOString(),
    "roomsPerProcess": value.roomsPerProcess,
    "additionalExposedPorts": value.additionalExposedPorts.map(ExposedPortToJSON),
    "exposedPort": ExposedPortToJSON(value.exposedPort),
    "port": value.port,
    "host": value.host,
    "region": RegionToJSON(value.region),
    "processId": value.processId,
    "deploymentId": value.deploymentId,
    "appId": value.appId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ProcessWithRooms.js
function instanceOfProcessWithRooms(value) {
  let isInstance = true;
  isInstance = isInstance && "egressedBytes" in value;
  isInstance = isInstance && "idleSince" in value;
  isInstance = isInstance && "activeConnectionsUpdatedAt" in value;
  isInstance = isInstance && "activeConnections" in value;
  isInstance = isInstance && "roomSlotsAvailableUpdatedAt" in value;
  isInstance = isInstance && "roomSlotsAvailable" in value;
  isInstance = isInstance && "draining" in value;
  isInstance = isInstance && "terminatedAt" in value;
  isInstance = isInstance && "stoppingAt" in value;
  isInstance = isInstance && "startedAt" in value;
  isInstance = isInstance && "startingAt" in value;
  isInstance = isInstance && "roomsPerProcess" in value;
  isInstance = isInstance && "additionalExposedPorts" in value;
  isInstance = isInstance && "port" in value;
  isInstance = isInstance && "host" in value;
  isInstance = isInstance && "region" in value;
  isInstance = isInstance && "processId" in value;
  isInstance = isInstance && "deploymentId" in value;
  isInstance = isInstance && "appId" in value;
  isInstance = isInstance && "rooms" in value;
  isInstance = isInstance && "totalRooms" in value;
  return isInstance;
}
function ProcessWithRoomsFromJSON(json) {
  return ProcessWithRoomsFromJSONTyped(json, false);
}
function ProcessWithRoomsFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "egressedBytes": json["egressedBytes"],
    "idleSince": json["idleSince"] === null ? null : new Date(json["idleSince"]),
    "activeConnectionsUpdatedAt": new Date(json["activeConnectionsUpdatedAt"]),
    "activeConnections": json["activeConnections"],
    "roomSlotsAvailableUpdatedAt": new Date(json["roomSlotsAvailableUpdatedAt"]),
    "roomSlotsAvailable": json["roomSlotsAvailable"],
    "draining": json["draining"],
    "terminatedAt": json["terminatedAt"] === null ? null : new Date(json["terminatedAt"]),
    "stoppingAt": json["stoppingAt"] === null ? null : new Date(json["stoppingAt"]),
    "startedAt": json["startedAt"] === null ? null : new Date(json["startedAt"]),
    "startingAt": new Date(json["startingAt"]),
    "roomsPerProcess": json["roomsPerProcess"],
    "additionalExposedPorts": json["additionalExposedPorts"].map(ExposedPortFromJSON),
    "exposedPort": !exists(json, "exposedPort") ? void 0 : ExposedPortFromJSON(json["exposedPort"]),
    "port": json["port"],
    "host": json["host"],
    "region": RegionFromJSON(json["region"]),
    "processId": json["processId"],
    "deploymentId": json["deploymentId"],
    "appId": json["appId"],
    "rooms": json["rooms"].map(PickRoomExcludeKeyofRoomAllocationsFromJSON),
    "totalRooms": json["totalRooms"]
  };
}
function ProcessWithRoomsToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "egressedBytes": value.egressedBytes,
    "idleSince": value.idleSince === null ? null : value.idleSince.toISOString(),
    "activeConnectionsUpdatedAt": value.activeConnectionsUpdatedAt.toISOString(),
    "activeConnections": value.activeConnections,
    "roomSlotsAvailableUpdatedAt": value.roomSlotsAvailableUpdatedAt.toISOString(),
    "roomSlotsAvailable": value.roomSlotsAvailable,
    "draining": value.draining,
    "terminatedAt": value.terminatedAt === null ? null : value.terminatedAt.toISOString(),
    "stoppingAt": value.stoppingAt === null ? null : value.stoppingAt.toISOString(),
    "startedAt": value.startedAt === null ? null : value.startedAt.toISOString(),
    "startingAt": value.startingAt.toISOString(),
    "roomsPerProcess": value.roomsPerProcess,
    "additionalExposedPorts": value.additionalExposedPorts.map(ExposedPortToJSON),
    "exposedPort": ExposedPortToJSON(value.exposedPort),
    "port": value.port,
    "host": value.host,
    "region": RegionToJSON(value.region),
    "processId": value.processId,
    "deploymentId": value.deploymentId,
    "appId": value.appId,
    "rooms": value.rooms.map(PickRoomExcludeKeyofRoomAllocationsToJSON),
    "totalRooms": value.totalRooms
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/ProcessWithRoomsAllOf.js
function instanceOfProcessWithRoomsAllOf(value) {
  let isInstance = true;
  isInstance = isInstance && "rooms" in value;
  isInstance = isInstance && "totalRooms" in value;
  return isInstance;
}
function ProcessWithRoomsAllOfFromJSON(json) {
  return ProcessWithRoomsAllOfFromJSONTyped(json, false);
}
function ProcessWithRoomsAllOfFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "rooms": json["rooms"].map(PickRoomExcludeKeyofRoomAllocationsFromJSON),
    "totalRooms": json["totalRooms"]
  };
}
function ProcessWithRoomsAllOfToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "rooms": value.rooms.map(PickRoomExcludeKeyofRoomAllocationsToJSON),
    "totalRooms": value.totalRooms
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/RecordPartialMetricNameMetricValueArray.js
function instanceOfRecordPartialMetricNameMetricValueArray(value) {
  let isInstance = true;
  return isInstance;
}
function RecordPartialMetricNameMetricValueArrayFromJSON(json) {
  return RecordPartialMetricNameMetricValueArrayFromJSONTyped(json, false);
}
function RecordPartialMetricNameMetricValueArrayFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "cpu": !exists(json, "cpu") ? void 0 : json["cpu"].map(MetricValueFromJSON),
    "memory": !exists(json, "memory") ? void 0 : json["memory"].map(MetricValueFromJSON),
    "rateEgress": !exists(json, "rate_egress") ? void 0 : json["rate_egress"].map(MetricValueFromJSON),
    "totalEgress": !exists(json, "total_egress") ? void 0 : json["total_egress"].map(MetricValueFromJSON)
  };
}
function RecordPartialMetricNameMetricValueArrayToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "cpu": value.cpu === void 0 ? void 0 : value.cpu.map(MetricValueToJSON),
    "memory": value.memory === void 0 ? void 0 : value.memory.map(MetricValueToJSON),
    "rate_egress": value.rateEgress === void 0 ? void 0 : value.rateEgress.map(MetricValueToJSON),
    "total_egress": value.totalEgress === void 0 ? void 0 : value.totalEgress.map(MetricValueToJSON)
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/Room.js
function instanceOfRoom(value) {
  let isInstance = true;
  isInstance = isInstance && "currentAllocation" in value;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "allocations" in value;
  isInstance = isInstance && "roomId" in value;
  isInstance = isInstance && "appId" in value;
  return isInstance;
}
function RoomFromJSON(json) {
  return RoomFromJSONTyped(json, false);
}
function RoomFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "currentAllocation": RoomAllocationFromJSON(json["currentAllocation"]),
    "status": RoomStatusFromJSON(json["status"]),
    "allocations": json["allocations"].map(RoomAllocationFromJSON),
    "roomId": json["roomId"],
    "appId": json["appId"]
  };
}
function RoomToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "currentAllocation": RoomAllocationToJSON(value.currentAllocation),
    "status": RoomStatusToJSON(value.status),
    "allocations": value.allocations.map(RoomAllocationToJSON),
    "roomId": value.roomId,
    "appId": value.appId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/SetLobbyStateRequest.js
function instanceOfSetLobbyStateRequest(value) {
  let isInstance = true;
  isInstance = isInstance && "state" in value;
  return isInstance;
}
function SetLobbyStateRequestFromJSON(json) {
  return SetLobbyStateRequestFromJSONTyped(json, false);
}
function SetLobbyStateRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "state": json["state"]
  };
}
function SetLobbyStateRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "state": value.state
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/StartingConnectionInfo.js
var StartingConnectionInfoStatusEnum = {
  Starting: "starting"
};
function instanceOfStartingConnectionInfo(value) {
  let isInstance = true;
  isInstance = isInstance && "status" in value;
  isInstance = isInstance && "roomId" in value;
  return isInstance;
}
function StartingConnectionInfoFromJSON(json) {
  return StartingConnectionInfoFromJSONTyped(json, false);
}
function StartingConnectionInfoFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "status": json["status"],
    "roomId": json["roomId"]
  };
}
function StartingConnectionInfoToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "status": value.status,
    "roomId": value.roomId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/VerificationEmailRequest.js
function instanceOfVerificationEmailRequest(value) {
  let isInstance = true;
  isInstance = isInstance && "userId" in value;
  return isInstance;
}
function VerificationEmailRequestFromJSON(json) {
  return VerificationEmailRequestFromJSONTyped(json, false);
}
function VerificationEmailRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "userId": json["userId"]
  };
}
function VerificationEmailRequestToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "userId": value.userId
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/models/VerificationEmailResponse.js
var VerificationEmailResponseStatusEnum = {
  Success: "success"
};
function instanceOfVerificationEmailResponse(value) {
  let isInstance = true;
  isInstance = isInstance && "status" in value;
  return isInstance;
}
function VerificationEmailResponseFromJSON(json) {
  return VerificationEmailResponseFromJSONTyped(json, false);
}
function VerificationEmailResponseFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "status": json["status"]
  };
}
function VerificationEmailResponseToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "status": value.status
  };
}

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/AppV1Api.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var AppV1Api = class extends BaseAPI {
  /**
   * Create a new [application](https://hathora.dev/docs/concepts/hathora-entities#application).
   */
  createAppRaw(requestParameters, initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (requestParameters.appConfig === null || requestParameters.appConfig === void 0) {
        throw new RequiredError("appConfig", "Required parameter requestParameters.appConfig was null or undefined when calling createApp.");
      }
      const queryParameters = {};
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/apps/v1/create`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AppConfigToJSON(requestParameters.appConfig)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    });
  }
  /**
   * Create a new [application](https://hathora.dev/docs/concepts/hathora-entities#application).
   */
  createApp(appConfig, initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.createAppRaw({ appConfig }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Delete an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Your organization will lose access to this application.
   */
  deleteAppRaw(requestParameters, initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling deleteApp.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/apps/v1/delete/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new VoidApiResponse(response);
    });
  }
  /**
   * Delete an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Your organization will lose access to this application.
   */
  deleteApp(appId, initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      yield this.deleteAppRaw({ appId }, initOverrides);
    });
  }
  /**
   * Get details for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  getAppInfoRaw(requestParameters, initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getAppInfo.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/apps/v1/info/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    });
  }
  /**
   * Get details for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  getAppInfo(appId, initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.getAppInfoRaw({ appId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Returns an unsorted list of your organization’s [applications](https://hathora.dev/docs/concepts/hathora-entities#application). An application is uniquely identified by an `appId`.
   */
  getAppsRaw(initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/apps/v1/list`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationWithDeploymentFromJSON));
    });
  }
  /**
   * Returns an unsorted list of your organization’s [applications](https://hathora.dev/docs/concepts/hathora-entities#application). An application is uniquely identified by an `appId`.
   */
  getApps(initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.getAppsRaw(initOverrides);
      return yield response.value();
    });
  }
  /**
   * Update data for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  updateAppRaw(requestParameters, initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling updateApp.");
      }
      if (requestParameters.appConfig === null || requestParameters.appConfig === void 0) {
        throw new RequiredError("appConfig", "Required parameter requestParameters.appConfig was null or undefined when calling updateApp.");
      }
      const queryParameters = {};
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/apps/v1/update/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AppConfigToJSON(requestParameters.appConfig)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    });
  }
  /**
   * Update data for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  updateApp(appId, appConfig, initOverrides) {
    return __awaiter2(this, void 0, void 0, function* () {
      const response = yield this.updateAppRaw({ appId, appConfig }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/AuthV1Api.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var AuthV1Api = class extends BaseAPI {
  /**
   */
  loginAnonymousRaw(requestParameters, initOverrides) {
    return __awaiter3(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling loginAnonymous.");
      }
      const queryParameters = {};
      const headerParameters = {};
      const response = yield this.request({
        path: `/auth/v1/{appId}/login/anonymous`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    });
  }
  /**
   */
  loginAnonymous(appId, initOverrides) {
    return __awaiter3(this, void 0, void 0, function* () {
      const response = yield this.loginAnonymousRaw({ appId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  loginGoogleRaw(requestParameters, initOverrides) {
    return __awaiter3(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling loginGoogle.");
      }
      if (requestParameters.loginGoogleRequest === null || requestParameters.loginGoogleRequest === void 0) {
        throw new RequiredError("loginGoogleRequest", "Required parameter requestParameters.loginGoogleRequest was null or undefined when calling loginGoogle.");
      }
      const queryParameters = {};
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      const response = yield this.request({
        path: `/auth/v1/{appId}/login/google`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginGoogleRequestToJSON(requestParameters.loginGoogleRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    });
  }
  /**
   */
  loginGoogle(appId, loginGoogleRequest, initOverrides) {
    return __awaiter3(this, void 0, void 0, function* () {
      const response = yield this.loginGoogleRaw({ appId, loginGoogleRequest }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  loginNicknameRaw(requestParameters, initOverrides) {
    return __awaiter3(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling loginNickname.");
      }
      if (requestParameters.loginNicknameRequest === null || requestParameters.loginNicknameRequest === void 0) {
        throw new RequiredError("loginNicknameRequest", "Required parameter requestParameters.loginNicknameRequest was null or undefined when calling loginNickname.");
      }
      const queryParameters = {};
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      const response = yield this.request({
        path: `/auth/v1/{appId}/login/nickname`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginNicknameRequestToJSON(requestParameters.loginNicknameRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    });
  }
  /**
   */
  loginNickname(appId, loginNicknameRequest, initOverrides) {
    return __awaiter3(this, void 0, void 0, function* () {
      const response = yield this.loginNicknameRaw({ appId, loginNicknameRequest }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/BillingV1Api.js
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var BillingV1Api = class extends BaseAPI {
  /**
   */
  getBalanceRaw(initOverrides) {
    return __awaiter4(this, void 0, void 0, function* () {
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/billing/v1/balance`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   */
  getBalance(initOverrides) {
    return __awaiter4(this, void 0, void 0, function* () {
      const response = yield this.getBalanceRaw(initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  getInvoicesRaw(initOverrides) {
    return __awaiter4(this, void 0, void 0, function* () {
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/billing/v1/invoices`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceFromJSON));
    });
  }
  /**
   */
  getInvoices(initOverrides) {
    return __awaiter4(this, void 0, void 0, function* () {
      const response = yield this.getInvoicesRaw(initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  getPaymentMethodRaw(initOverrides) {
    return __awaiter4(this, void 0, void 0, function* () {
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/billing/v1/paymentmethod`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethodFromJSON(jsonValue));
    });
  }
  /**
   */
  getPaymentMethod(initOverrides) {
    return __awaiter4(this, void 0, void 0, function* () {
      const response = yield this.getPaymentMethodRaw(initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  initStripeCustomerPortalUrlRaw(requestParameters, initOverrides) {
    return __awaiter4(this, void 0, void 0, function* () {
      if (requestParameters.customerPortalUrl === null || requestParameters.customerPortalUrl === void 0) {
        throw new RequiredError("customerPortalUrl", "Required parameter requestParameters.customerPortalUrl was null or undefined when calling initStripeCustomerPortalUrl.");
      }
      const queryParameters = {};
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/billing/v1/customerportalurl`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CustomerPortalUrlToJSON(requestParameters.customerPortalUrl)
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   */
  initStripeCustomerPortalUrl(customerPortalUrl, initOverrides) {
    return __awaiter4(this, void 0, void 0, function* () {
      const response = yield this.initStripeCustomerPortalUrlRaw({ customerPortalUrl }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/BuildV1Api.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var BuildV1Api = class extends BaseAPI {
  /**
   * Generate a new `buildId` for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. You need `buildId` to run a [build](https://hathora.dev/docs/concepts/hathora-entities#build).
   */
  createBuildRaw(requestParameters, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createBuild.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/builds/v1/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => BuildFromJSON(jsonValue));
    });
  }
  /**
   * Generate a new `buildId` for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. You need `buildId` to run a [build](https://hathora.dev/docs/concepts/hathora-entities#build).
   */
  createBuild(appId, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      const response = yield this.createBuildRaw({ appId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `buildId`.
   */
  deleteBuildRaw(requestParameters, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling deleteBuild.");
      }
      if (requestParameters.buildId === null || requestParameters.buildId === void 0) {
        throw new RequiredError("buildId", "Required parameter requestParameters.buildId was null or undefined when calling deleteBuild.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/builds/v1/{appId}/delete/{buildId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"buildId"}}`, encodeURIComponent(String(requestParameters.buildId))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new VoidApiResponse(response);
    });
  }
  /**
   * Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `buildId`.
   */
  deleteBuild(appId, buildId, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      yield this.deleteBuildRaw({ appId, buildId }, initOverrides);
    });
  }
  /**
   * Get details for an existing [build](https://hathora.dev/docs/concepts/hathora-entities#build) using `appId` and `buildId`.
   */
  getBuildInfoRaw(requestParameters, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getBuildInfo.");
      }
      if (requestParameters.buildId === null || requestParameters.buildId === void 0) {
        throw new RequiredError("buildId", "Required parameter requestParameters.buildId was null or undefined when calling getBuildInfo.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/builds/v1/{appId}/info/{buildId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"buildId"}}`, encodeURIComponent(String(requestParameters.buildId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => BuildFromJSON(jsonValue));
    });
  }
  /**
   * Get details for an existing [build](https://hathora.dev/docs/concepts/hathora-entities#build) using `appId` and `buildId`.
   */
  getBuildInfo(appId, buildId, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      const response = yield this.getBuildInfoRaw({ appId, buildId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Returns an array of [build](https://hathora.dev/docs/concepts/hathora-entities#build) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  getBuildsRaw(requestParameters, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getBuilds.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/builds/v1/{appId}/list`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(BuildFromJSON));
    });
  }
  /**
   * Returns an array of [build](https://hathora.dev/docs/concepts/hathora-entities#build) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  getBuilds(appId, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      const response = yield this.getBuildsRaw({ appId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Provide a tarball that will generate a container image for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Pass in `buildId` generated from Create Build.
   */
  runBuildRaw(requestParameters, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling runBuild.");
      }
      if (requestParameters.buildId === null || requestParameters.buildId === void 0) {
        throw new RequiredError("buildId", "Required parameter requestParameters.buildId was null or undefined when calling runBuild.");
      }
      if (requestParameters.file === null || requestParameters.file === void 0) {
        throw new RequiredError("file", "Required parameter requestParameters.file was null or undefined when calling runBuild.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const consumes = [
        { contentType: "multipart/form-data" }
      ];
      const canConsumeForm2 = canConsumeForm(consumes);
      let formParams;
      let useForm = false;
      useForm = canConsumeForm2;
      if (useForm) {
        formParams = new FormData();
      } else {
        formParams = new URLSearchParams();
      }
      if (requestParameters.file !== void 0) {
        formParams.append("file", requestParameters.file);
      }
      const response = yield this.request({
        path: `/builds/v1/{appId}/run/{buildId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"buildId"}}`, encodeURIComponent(String(requestParameters.buildId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   * Provide a tarball that will generate a container image for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Pass in `buildId` generated from Create Build.
   */
  runBuild(appId, buildId, file, initOverrides) {
    return __awaiter5(this, void 0, void 0, function* () {
      const response = yield this.runBuildRaw({ appId, buildId, file }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/DeploymentV1Api.js
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var DeploymentV1Api = class extends BaseAPI {
  /**
   * Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) and [build](https://hathora.dev/docs/concepts/hathora-entities#build).
   */
  createDeploymentRaw(requestParameters, initOverrides) {
    return __awaiter6(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createDeployment.");
      }
      if (requestParameters.buildId === null || requestParameters.buildId === void 0) {
        throw new RequiredError("buildId", "Required parameter requestParameters.buildId was null or undefined when calling createDeployment.");
      }
      if (requestParameters.deploymentConfig === null || requestParameters.deploymentConfig === void 0) {
        throw new RequiredError("deploymentConfig", "Required parameter requestParameters.deploymentConfig was null or undefined when calling createDeployment.");
      }
      const queryParameters = {};
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/deployments/v1/{appId}/create/{buildId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"buildId"}}`, encodeURIComponent(String(requestParameters.buildId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: DeploymentConfigToJSON(requestParameters.deploymentConfig)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => DeploymentFromJSON(jsonValue));
    });
  }
  /**
   * Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) and [build](https://hathora.dev/docs/concepts/hathora-entities#build).
   */
  createDeployment(appId, buildId, deploymentConfig, initOverrides) {
    return __awaiter6(this, void 0, void 0, function* () {
      const response = yield this.createDeploymentRaw({ appId, buildId, deploymentConfig }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Get details for an existing [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) using `appId`.
   */
  getDeploymentInfoRaw(requestParameters, initOverrides) {
    return __awaiter6(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getDeploymentInfo.");
      }
      if (requestParameters.deploymentId === null || requestParameters.deploymentId === void 0) {
        throw new RequiredError("deploymentId", "Required parameter requestParameters.deploymentId was null or undefined when calling getDeploymentInfo.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/deployments/v1/{appId}/info/{deploymentId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => DeploymentFromJSON(jsonValue));
    });
  }
  /**
   * Get details for an existing [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) using `appId`.
   */
  getDeploymentInfo(appId, deploymentId, initOverrides) {
    return __awaiter6(this, void 0, void 0, function* () {
      const response = yield this.getDeploymentInfoRaw({ appId, deploymentId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Returns an array of [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  getDeploymentsRaw(requestParameters, initOverrides) {
    return __awaiter6(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getDeployments.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/deployments/v1/{appId}/list`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(DeploymentFromJSON));
    });
  }
  /**
   * Returns an array of [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  getDeployments(appId, initOverrides) {
    return __awaiter6(this, void 0, void 0, function* () {
      const response = yield this.getDeploymentsRaw({ appId }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/DiscoveryV1Api.js
var __awaiter7 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var DiscoveryV1Api = class extends BaseAPI {
  /**
   * Returns an array of all regions with a host and port that a client can directly ping.
   */
  getPingServiceEndpointsRaw(initOverrides) {
    return __awaiter7(this, void 0, void 0, function* () {
      const queryParameters = {};
      const headerParameters = {};
      const response = yield this.request({
        path: `/discovery/v1/ping`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(DiscoveryResponseInnerFromJSON));
    });
  }
  /**
   * Returns an array of all regions with a host and port that a client can directly ping.
   */
  getPingServiceEndpoints(initOverrides) {
    return __awaiter7(this, void 0, void 0, function* () {
      const response = yield this.getPingServiceEndpointsRaw(initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/LobbyV1Api.js
var __awaiter8 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var LobbyV1Api = class extends BaseAPI {
  /**
   */
  createPrivateLobbyDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter8(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createPrivateLobbyDeprecated.");
      }
      if (requestParameters.authorization === null || requestParameters.authorization === void 0) {
        throw new RequiredError("authorization", "Required parameter requestParameters.authorization was null or undefined when calling createPrivateLobbyDeprecated.");
      }
      const queryParameters = {};
      if (requestParameters.region !== void 0) {
        queryParameters["region"] = requestParameters.region;
      }
      if (requestParameters.local !== void 0) {
        queryParameters["local"] = requestParameters.local;
      }
      const headerParameters = {};
      if (requestParameters.authorization !== void 0 && requestParameters.authorization !== null) {
        headerParameters["Authorization"] = String(requestParameters.authorization);
      }
      const response = yield this.request({
        path: `/lobby/v1/{appId}/create/private`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   */
  createPrivateLobbyDeprecated(appId, authorization, region, local, initOverrides) {
    return __awaiter8(this, void 0, void 0, function* () {
      const response = yield this.createPrivateLobbyDeprecatedRaw({ appId, authorization, region, local }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  createPublicLobbyDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter8(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createPublicLobbyDeprecated.");
      }
      if (requestParameters.authorization === null || requestParameters.authorization === void 0) {
        throw new RequiredError("authorization", "Required parameter requestParameters.authorization was null or undefined when calling createPublicLobbyDeprecated.");
      }
      const queryParameters = {};
      if (requestParameters.region !== void 0) {
        queryParameters["region"] = requestParameters.region;
      }
      if (requestParameters.local !== void 0) {
        queryParameters["local"] = requestParameters.local;
      }
      const headerParameters = {};
      if (requestParameters.authorization !== void 0 && requestParameters.authorization !== null) {
        headerParameters["Authorization"] = String(requestParameters.authorization);
      }
      const response = yield this.request({
        path: `/lobby/v1/{appId}/create/public`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   */
  createPublicLobbyDeprecated(appId, authorization, region, local, initOverrides) {
    return __awaiter8(this, void 0, void 0, function* () {
      const response = yield this.createPublicLobbyDeprecatedRaw({ appId, authorization, region, local }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  listActivePublicLobbiesDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter8(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling listActivePublicLobbiesDeprecated.");
      }
      if (requestParameters.authorization === null || requestParameters.authorization === void 0) {
        throw new RequiredError("authorization", "Required parameter requestParameters.authorization was null or undefined when calling listActivePublicLobbiesDeprecated.");
      }
      const queryParameters = {};
      if (requestParameters.local !== void 0) {
        queryParameters["local"] = requestParameters.local;
      }
      if (requestParameters.region !== void 0) {
        queryParameters["region"] = requestParameters.region;
      }
      const headerParameters = {};
      if (requestParameters.authorization !== void 0 && requestParameters.authorization !== null) {
        headerParameters["Authorization"] = String(requestParameters.authorization);
      }
      const response = yield this.request({
        path: `/lobby/v1/{appId}/list`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(LobbyFromJSON));
    });
  }
  /**
   */
  listActivePublicLobbiesDeprecated(appId, authorization, local, region, initOverrides) {
    return __awaiter8(this, void 0, void 0, function* () {
      const response = yield this.listActivePublicLobbiesDeprecatedRaw({ appId, authorization, local, region }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/LobbyV2Api.js
var __awaiter9 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var LobbyV2Api = class extends BaseAPI {
  /**
   * Create a new [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  createLobbyRaw(requestParameters, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createLobby.");
      }
      if (requestParameters.authorization === null || requestParameters.authorization === void 0) {
        throw new RequiredError("authorization", "Required parameter requestParameters.authorization was null or undefined when calling createLobby.");
      }
      if (requestParameters.createLobbyRequest === null || requestParameters.createLobbyRequest === void 0) {
        throw new RequiredError("createLobbyRequest", "Required parameter requestParameters.createLobbyRequest was null or undefined when calling createLobby.");
      }
      const queryParameters = {};
      if (requestParameters.roomId !== void 0) {
        queryParameters["roomId"] = requestParameters.roomId;
      }
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (requestParameters.authorization !== void 0 && requestParameters.authorization !== null) {
        headerParameters["Authorization"] = String(requestParameters.authorization);
      }
      const response = yield this.request({
        path: `/lobby/v2/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateLobbyRequestToJSON(requestParameters.createLobbyRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    });
  }
  /**
   * Create a new [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  createLobby(appId, authorization, createLobbyRequest, roomId, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      const response = yield this.createLobbyRaw({ appId, authorization, createLobbyRequest, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  createLocalLobbyRaw(requestParameters, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createLocalLobby.");
      }
      if (requestParameters.authorization === null || requestParameters.authorization === void 0) {
        throw new RequiredError("authorization", "Required parameter requestParameters.authorization was null or undefined when calling createLocalLobby.");
      }
      if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === void 0) {
        throw new RequiredError("createPrivateLobbyRequest", "Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createLocalLobby.");
      }
      const queryParameters = {};
      if (requestParameters.roomId !== void 0) {
        queryParameters["roomId"] = requestParameters.roomId;
      }
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (requestParameters.authorization !== void 0 && requestParameters.authorization !== null) {
        headerParameters["Authorization"] = String(requestParameters.authorization);
      }
      const response = yield this.request({
        path: `/lobby/v2/{appId}/create/local`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    });
  }
  /**
   */
  createLocalLobby(appId, authorization, createPrivateLobbyRequest, roomId, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      const response = yield this.createLocalLobbyRaw({ appId, authorization, createPrivateLobbyRequest, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  createPrivateLobbyRaw(requestParameters, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createPrivateLobby.");
      }
      if (requestParameters.authorization === null || requestParameters.authorization === void 0) {
        throw new RequiredError("authorization", "Required parameter requestParameters.authorization was null or undefined when calling createPrivateLobby.");
      }
      if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === void 0) {
        throw new RequiredError("createPrivateLobbyRequest", "Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createPrivateLobby.");
      }
      const queryParameters = {};
      if (requestParameters.roomId !== void 0) {
        queryParameters["roomId"] = requestParameters.roomId;
      }
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (requestParameters.authorization !== void 0 && requestParameters.authorization !== null) {
        headerParameters["Authorization"] = String(requestParameters.authorization);
      }
      const response = yield this.request({
        path: `/lobby/v2/{appId}/create/private`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    });
  }
  /**
   */
  createPrivateLobby(appId, authorization, createPrivateLobbyRequest, roomId, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      const response = yield this.createPrivateLobbyRaw({ appId, authorization, createPrivateLobbyRequest, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  createPublicLobbyRaw(requestParameters, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createPublicLobby.");
      }
      if (requestParameters.authorization === null || requestParameters.authorization === void 0) {
        throw new RequiredError("authorization", "Required parameter requestParameters.authorization was null or undefined when calling createPublicLobby.");
      }
      if (requestParameters.createPrivateLobbyRequest === null || requestParameters.createPrivateLobbyRequest === void 0) {
        throw new RequiredError("createPrivateLobbyRequest", "Required parameter requestParameters.createPrivateLobbyRequest was null or undefined when calling createPublicLobby.");
      }
      const queryParameters = {};
      if (requestParameters.roomId !== void 0) {
        queryParameters["roomId"] = requestParameters.roomId;
      }
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (requestParameters.authorization !== void 0 && requestParameters.authorization !== null) {
        headerParameters["Authorization"] = String(requestParameters.authorization);
      }
      const response = yield this.request({
        path: `/lobby/v2/{appId}/create/public`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreatePrivateLobbyRequestToJSON(requestParameters.createPrivateLobbyRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    });
  }
  /**
   */
  createPublicLobby(appId, authorization, createPrivateLobbyRequest, roomId, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      const response = yield this.createPublicLobbyRaw({ appId, authorization, createPrivateLobbyRequest, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Get details for an existing [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) using `appId` and `roomId`.
   */
  getLobbyInfoRaw(requestParameters, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getLobbyInfo.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling getLobbyInfo.");
      }
      const queryParameters = {};
      const headerParameters = {};
      const response = yield this.request({
        path: `/lobby/v2/{appId}/info/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    });
  }
  /**
   * Get details for an existing [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) using `appId` and `roomId`.
   */
  getLobbyInfo(appId, roomId, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      const response = yield this.getLobbyInfoRaw({ appId, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Get all active [lobbies](https://hathora.dev/docs/concepts/hathora-entities#lobby) for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a `region`.
   */
  listActivePublicLobbiesRaw(requestParameters, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling listActivePublicLobbies.");
      }
      const queryParameters = {};
      if (requestParameters.region !== void 0) {
        queryParameters["region"] = requestParameters.region;
      }
      const headerParameters = {};
      const response = yield this.request({
        path: `/lobby/v2/{appId}/list/public`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(LobbyFromJSON));
    });
  }
  /**
   * Get all active [lobbies](https://hathora.dev/docs/concepts/hathora-entities#lobby) for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a `region`.
   */
  listActivePublicLobbies(appId, region, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      const response = yield this.listActivePublicLobbiesRaw({ appId, region }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Set the state of a [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) using `appId` and `roomId`. State is intended to be set by the server and must be smaller than 1MB.
   */
  setLobbyStateRaw(requestParameters, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling setLobbyState.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling setLobbyState.");
      }
      if (requestParameters.setLobbyStateRequest === null || requestParameters.setLobbyStateRequest === void 0) {
        throw new RequiredError("setLobbyStateRequest", "Required parameter requestParameters.setLobbyStateRequest was null or undefined when calling setLobbyState.");
      }
      const queryParameters = {};
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/lobby/v2/{appId}/setState/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SetLobbyStateRequestToJSON(requestParameters.setLobbyStateRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => LobbyFromJSON(jsonValue));
    });
  }
  /**
   * Set the state of a [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) using `appId` and `roomId`. State is intended to be set by the server and must be smaller than 1MB.
   */
  setLobbyState(appId, roomId, setLobbyStateRequest, initOverrides) {
    return __awaiter9(this, void 0, void 0, function* () {
      const response = yield this.setLobbyStateRaw({ appId, roomId, setLobbyStateRequest }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/LogV1Api.js
var __awaiter10 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var LogV1Api = class extends BaseAPI {
  /**
   * Returns a stream of logs for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  getLogsForAppRaw(requestParameters, initOverrides) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getLogsForApp.");
      }
      const queryParameters = {};
      if (requestParameters.follow !== void 0) {
        queryParameters["follow"] = requestParameters.follow;
      }
      if (requestParameters.tailLines !== void 0) {
        queryParameters["tailLines"] = requestParameters.tailLines;
      }
      if (requestParameters.region !== void 0) {
        queryParameters["region"] = requestParameters.region;
      }
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/logs/v1/{appId}/all`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   * Returns a stream of logs for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
   */
  getLogsForApp(appId, follow, tailLines, region, initOverrides) {
    return __awaiter10(this, void 0, void 0, function* () {
      const response = yield this.getLogsForAppRaw({ appId, follow, tailLines, region }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Returns a stream of logs for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) using `appId` and `deploymentId`.
   */
  getLogsForDeploymentRaw(requestParameters, initOverrides) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getLogsForDeployment.");
      }
      if (requestParameters.deploymentId === null || requestParameters.deploymentId === void 0) {
        throw new RequiredError("deploymentId", "Required parameter requestParameters.deploymentId was null or undefined when calling getLogsForDeployment.");
      }
      const queryParameters = {};
      if (requestParameters.follow !== void 0) {
        queryParameters["follow"] = requestParameters.follow;
      }
      if (requestParameters.tailLines !== void 0) {
        queryParameters["tailLines"] = requestParameters.tailLines;
      }
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/logs/v1/{appId}/deployment/{deploymentId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"deploymentId"}}`, encodeURIComponent(String(requestParameters.deploymentId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   * Returns a stream of logs for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) using `appId` and `deploymentId`.
   */
  getLogsForDeployment(appId, deploymentId, follow, tailLines, initOverrides) {
    return __awaiter10(this, void 0, void 0, function* () {
      const response = yield this.getLogsForDeploymentRaw({ appId, deploymentId, follow, tailLines }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Returns a stream of logs for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getLogsForProcessRaw(requestParameters, initOverrides) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getLogsForProcess.");
      }
      if (requestParameters.processId === null || requestParameters.processId === void 0) {
        throw new RequiredError("processId", "Required parameter requestParameters.processId was null or undefined when calling getLogsForProcess.");
      }
      const queryParameters = {};
      if (requestParameters.follow !== void 0) {
        queryParameters["follow"] = requestParameters.follow;
      }
      if (requestParameters.tailLines !== void 0) {
        queryParameters["tailLines"] = requestParameters.tailLines;
      }
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/logs/v1/{appId}/process/{processId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   * Returns a stream of logs for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getLogsForProcess(appId, processId, follow, tailLines, initOverrides) {
    return __awaiter10(this, void 0, void 0, function* () {
      const response = yield this.getLogsForProcessRaw({ appId, processId, follow, tailLines }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/ManagementV1Api.js
var __awaiter11 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var ManagementV1Api = class extends BaseAPI {
  /**
   */
  sendVerificationEmailRaw(requestParameters, initOverrides) {
    return __awaiter11(this, void 0, void 0, function* () {
      if (requestParameters.verificationEmailRequest === null || requestParameters.verificationEmailRequest === void 0) {
        throw new RequiredError("verificationEmailRequest", "Required parameter requestParameters.verificationEmailRequest was null or undefined when calling sendVerificationEmail.");
      }
      const queryParameters = {};
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      const response = yield this.request({
        path: `/management/v1/sendverificationemail`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: VerificationEmailRequestToJSON(requestParameters.verificationEmailRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => VerificationEmailResponseFromJSON(jsonValue));
    });
  }
  /**
   */
  sendVerificationEmail(verificationEmailRequest, initOverrides) {
    return __awaiter11(this, void 0, void 0, function* () {
      const response = yield this.sendVerificationEmailRaw({ verificationEmailRequest }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/MetricsV1Api.js
var __awaiter12 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var MetricsV1Api = class extends BaseAPI {
  /**
   * Get metrics for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getMetricsRaw(requestParameters, initOverrides) {
    return __awaiter12(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getMetrics.");
      }
      if (requestParameters.processId === null || requestParameters.processId === void 0) {
        throw new RequiredError("processId", "Required parameter requestParameters.processId was null or undefined when calling getMetrics.");
      }
      const queryParameters = {};
      if (requestParameters.metrics) {
        queryParameters["metrics"] = requestParameters.metrics;
      }
      if (requestParameters.end !== void 0) {
        queryParameters["end"] = requestParameters.end;
      }
      if (requestParameters.start !== void 0) {
        queryParameters["start"] = requestParameters.start;
      }
      if (requestParameters.step !== void 0) {
        queryParameters["step"] = requestParameters.step;
      }
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/metrics/v1/{appId}/process/{processId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => RecordPartialMetricNameMetricValueArrayFromJSON(jsonValue));
    });
  }
  /**
   * Get metrics for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getMetrics(appId, processId, metrics, end, start, step, initOverrides) {
    return __awaiter12(this, void 0, void 0, function* () {
      const response = yield this.getMetricsRaw({ appId, processId, metrics, end, start, step }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/ProcessesV1Api.js
var __awaiter13 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var ProcessesV1Api = class extends BaseAPI {
  /**
   * Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getProcessInfoRaw(requestParameters, initOverrides) {
    return __awaiter13(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getProcessInfo.");
      }
      if (requestParameters.processId === null || requestParameters.processId === void 0) {
        throw new RequiredError("processId", "Required parameter requestParameters.processId was null or undefined when calling getProcessInfo.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/processes/v1/{appId}/info/{processId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => ProcessFromJSON(jsonValue));
    });
  }
  /**
   * Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getProcessInfo(appId, processId, initOverrides) {
    return __awaiter13(this, void 0, void 0, function* () {
      const response = yield this.getProcessInfoRaw({ appId, processId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
   */
  getRunningProcessesRaw(requestParameters, initOverrides) {
    return __awaiter13(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getRunningProcesses.");
      }
      const queryParameters = {};
      if (requestParameters.region !== void 0) {
        queryParameters["region"] = requestParameters.region;
      }
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/processes/v1/{appId}/list/running`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessWithRoomsFromJSON));
    });
  }
  /**
   * Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
   */
  getRunningProcesses(appId, region, initOverrides) {
    return __awaiter13(this, void 0, void 0, function* () {
      const response = yield this.getRunningProcessesRaw({ appId, region }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
   */
  getStoppedProcessesRaw(requestParameters, initOverrides) {
    return __awaiter13(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getStoppedProcesses.");
      }
      const queryParameters = {};
      if (requestParameters.region !== void 0) {
        queryParameters["region"] = requestParameters.region;
      }
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/processes/v1/{appId}/list/stopped`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessFromJSON));
    });
  }
  /**
   * Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
   */
  getStoppedProcesses(appId, region, initOverrides) {
    return __awaiter13(this, void 0, void 0, function* () {
      const response = yield this.getStoppedProcessesRaw({ appId, region }, initOverrides);
      return yield response.value();
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/RoomV1Api.js
var __awaiter14 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var RoomV1Api = class extends BaseAPI {
  /**
   */
  createRoomDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createRoomDeprecated.");
      }
      if (requestParameters.createRoomRequest === null || requestParameters.createRoomRequest === void 0) {
        throw new RequiredError("createRoomRequest", "Required parameter requestParameters.createRoomRequest was null or undefined when calling createRoomDeprecated.");
      }
      const queryParameters = {};
      if (requestParameters.roomId !== void 0) {
        queryParameters["roomId"] = requestParameters.roomId;
      }
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v1/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateRoomRequestToJSON(requestParameters.createRoomRequest)
      }, initOverrides);
      if (this.isJsonMime(response.headers.get("content-type"))) {
        return new JSONApiResponse(response);
      } else {
        return new TextApiResponse(response);
      }
    });
  }
  /**
   */
  createRoomDeprecated(appId, createRoomRequest, roomId, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      const response = yield this.createRoomDeprecatedRaw({ appId, createRoomRequest, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  destroyRoomDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling destroyRoomDeprecated.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling destroyRoomDeprecated.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v1/{appId}/destroy/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new VoidApiResponse(response);
    });
  }
  /**
   */
  destroyRoomDeprecated(appId, roomId, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      yield this.destroyRoomDeprecatedRaw({ appId, roomId }, initOverrides);
    });
  }
  /**
   */
  getActiveRoomsForProcessDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getActiveRoomsForProcessDeprecated.");
      }
      if (requestParameters.processId === null || requestParameters.processId === void 0) {
        throw new RequiredError("processId", "Required parameter requestParameters.processId was null or undefined when calling getActiveRoomsForProcessDeprecated.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v1/{appId}/list/{processId}/active`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PickRoomExcludeKeyofRoomAllocationsFromJSON));
    });
  }
  /**
   */
  getActiveRoomsForProcessDeprecated(appId, processId, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      const response = yield this.getActiveRoomsForProcessDeprecatedRaw({ appId, processId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  getConnectionInfoDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getConnectionInfoDeprecated.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling getConnectionInfoDeprecated.");
      }
      const queryParameters = {};
      const headerParameters = {};
      const response = yield this.request({
        path: `/rooms/v1/{appId}/connectioninfo/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => ConnectionInfoFromJSON(jsonValue));
    });
  }
  /**
   */
  getConnectionInfoDeprecated(appId, roomId, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      const response = yield this.getConnectionInfoDeprecatedRaw({ appId, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  getInactiveRoomsForProcessDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getInactiveRoomsForProcessDeprecated.");
      }
      if (requestParameters.processId === null || requestParameters.processId === void 0) {
        throw new RequiredError("processId", "Required parameter requestParameters.processId was null or undefined when calling getInactiveRoomsForProcessDeprecated.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v1/{appId}/list/{processId}/inactive`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PickRoomExcludeKeyofRoomAllocationsFromJSON));
    });
  }
  /**
   */
  getInactiveRoomsForProcessDeprecated(appId, processId, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      const response = yield this.getInactiveRoomsForProcessDeprecatedRaw({ appId, processId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  getRoomInfoDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getRoomInfoDeprecated.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling getRoomInfoDeprecated.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v1/{appId}/info/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    });
  }
  /**
   */
  getRoomInfoDeprecated(appId, roomId, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      const response = yield this.getRoomInfoDeprecatedRaw({ appId, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   */
  suspendRoomDeprecatedRaw(requestParameters, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling suspendRoomDeprecated.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling suspendRoomDeprecated.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v1/{appId}/suspend/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new VoidApiResponse(response);
    });
  }
  /**
   */
  suspendRoomDeprecated(appId, roomId, initOverrides) {
    return __awaiter14(this, void 0, void 0, function* () {
      yield this.suspendRoomDeprecatedRaw({ appId, roomId }, initOverrides);
    });
  }
};

// node_modules/@hathora/hathora-cloud-sdk/dist/esm/apis/RoomV2Api.js
var __awaiter15 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var RoomV2Api = class extends BaseAPI {
  /**
   * Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `region`.
   */
  createRoomRaw(requestParameters, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling createRoom.");
      }
      if (requestParameters.createRoomRequest === null || requestParameters.createRoomRequest === void 0) {
        throw new RequiredError("createRoomRequest", "Required parameter requestParameters.createRoomRequest was null or undefined when calling createRoom.");
      }
      const queryParameters = {};
      if (requestParameters.roomId !== void 0) {
        queryParameters["roomId"] = requestParameters.roomId;
      }
      const headerParameters = {};
      headerParameters["Content-Type"] = "application/json";
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v2/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateRoomRequestToJSON(requestParameters.createRoomRequest)
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => ConnectionInfoV2FromJSON(jsonValue));
    });
  }
  /**
   * Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `region`.
   */
  createRoom(appId, createRoomRequest, roomId, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      const response = yield this.createRoomRaw({ appId, createRoomRequest, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. All associated metadata is deleted.
   */
  destroyRoomRaw(requestParameters, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling destroyRoom.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling destroyRoom.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v2/{appId}/destroy/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new VoidApiResponse(response);
    });
  }
  /**
   * Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. All associated metadata is deleted.
   */
  destroyRoom(appId, roomId, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      yield this.destroyRoomRaw({ appId, roomId }, initOverrides);
    });
  }
  /**
   * Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getActiveRoomsForProcessRaw(requestParameters, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getActiveRoomsForProcess.");
      }
      if (requestParameters.processId === null || requestParameters.processId === void 0) {
        throw new RequiredError("processId", "Required parameter requestParameters.processId was null or undefined when calling getActiveRoomsForProcess.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v2/{appId}/list/{processId}/active`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PickRoomExcludeKeyofRoomAllocationsFromJSON));
    });
  }
  /**
   * Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getActiveRoomsForProcess(appId, processId, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      const response = yield this.getActiveRoomsForProcessRaw({ appId, processId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. Clients can call this endpoint without authentication.
   */
  getConnectionInfoRaw(requestParameters, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getConnectionInfo.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling getConnectionInfo.");
      }
      const queryParameters = {};
      const headerParameters = {};
      const response = yield this.request({
        path: `/rooms/v2/{appId}/connectioninfo/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => ConnectionInfoV2FromJSON(jsonValue));
    });
  }
  /**
   * Get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. Clients can call this endpoint without authentication.
   */
  getConnectionInfo(appId, roomId, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      const response = yield this.getConnectionInfoRaw({ appId, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getInactiveRoomsForProcessRaw(requestParameters, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getInactiveRoomsForProcess.");
      }
      if (requestParameters.processId === null || requestParameters.processId === void 0) {
        throw new RequiredError("processId", "Required parameter requestParameters.processId was null or undefined when calling getInactiveRoomsForProcess.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v2/{appId}/list/{processId}/inactive`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => jsonValue.map(PickRoomExcludeKeyofRoomAllocationsFromJSON));
    });
  }
  /**
   * Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
   */
  getInactiveRoomsForProcess(appId, processId, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      const response = yield this.getInactiveRoomsForProcessRaw({ appId, processId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Get details for an existing [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`.
   */
  getRoomInfoRaw(requestParameters, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling getRoomInfo.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling getRoomInfo.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v2/{appId}/info/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    });
  }
  /**
   * Get details for an existing [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`.
   */
  getRoomInfo(appId, roomId, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      const response = yield this.getRoomInfoRaw({ appId, roomId }, initOverrides);
      return yield response.value();
    });
  }
  /**
   * Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. The room is unallocated from the process but can be rescheduled later using the same `roomId`.
   */
  suspendRoomRaw(requestParameters, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      if (requestParameters.appId === null || requestParameters.appId === void 0) {
        throw new RequiredError("appId", "Required parameter requestParameters.appId was null or undefined when calling suspendRoom.");
      }
      if (requestParameters.roomId === null || requestParameters.roomId === void 0) {
        throw new RequiredError("roomId", "Required parameter requestParameters.roomId was null or undefined when calling suspendRoom.");
      }
      const queryParameters = {};
      const headerParameters = {};
      if (this.configuration && this.configuration.accessToken) {
        const token = this.configuration.accessToken;
        const tokenString = yield token("auth0", []);
        if (tokenString) {
          headerParameters["Authorization"] = `Bearer ${tokenString}`;
        }
      }
      const response = yield this.request({
        path: `/rooms/v2/{appId}/suspend/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
        method: "POST",
        headers: headerParameters,
        query: queryParameters
      }, initOverrides);
      return new VoidApiResponse(response);
    });
  }
  /**
   * Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. The room is unallocated from the process but can be rescheduled later using the same `roomId`.
   */
  suspendRoom(appId, roomId, initOverrides) {
    return __awaiter15(this, void 0, void 0, function* () {
      yield this.suspendRoomRaw({ appId, roomId }, initOverrides);
    });
  }
};
export {
  AchPaymentMethodFromJSON,
  AchPaymentMethodFromJSONTyped,
  AchPaymentMethodToJSON,
  ActiveConnectionInfoFromJSON,
  ActiveConnectionInfoFromJSONTyped,
  ActiveConnectionInfoStatusEnum,
  ActiveConnectionInfoToJSON,
  AppConfigAuthConfigurationFromJSON,
  AppConfigAuthConfigurationFromJSONTyped,
  AppConfigAuthConfigurationToJSON,
  AppConfigFromJSON,
  AppConfigFromJSONTyped,
  AppConfigToJSON,
  AppV1Api,
  ApplicationAuthConfigurationFromJSON,
  ApplicationAuthConfigurationFromJSONTyped,
  ApplicationAuthConfigurationGoogleFromJSON,
  ApplicationAuthConfigurationGoogleFromJSONTyped,
  ApplicationAuthConfigurationGoogleToJSON,
  ApplicationAuthConfigurationToJSON,
  ApplicationFromJSON,
  ApplicationFromJSONTyped,
  ApplicationToJSON,
  ApplicationWithDeploymentAllOfFromJSON,
  ApplicationWithDeploymentAllOfFromJSONTyped,
  ApplicationWithDeploymentAllOfToJSON,
  ApplicationWithDeploymentFromJSON,
  ApplicationWithDeploymentFromJSONTyped,
  ApplicationWithDeploymentToJSON,
  AuthV1Api,
  BASE_PATH,
  BaseAPI,
  BillingV1Api,
  BlobApiResponse,
  BuildFromJSON,
  BuildFromJSONTyped,
  BuildRegionalContainerTagsInnerFromJSON,
  BuildRegionalContainerTagsInnerFromJSONTyped,
  BuildRegionalContainerTagsInnerToJSON,
  BuildStatusEnum,
  BuildToJSON,
  BuildV1Api,
  COLLECTION_FORMATS,
  CardBrand,
  CardBrandFromJSON,
  CardBrandFromJSONTyped,
  CardBrandToJSON,
  CardPaymentMethodFromJSON,
  CardPaymentMethodFromJSONTyped,
  CardPaymentMethodToJSON,
  Configuration,
  ConnectionInfoFromJSON,
  ConnectionInfoFromJSONTyped,
  ConnectionInfoStatusEnum,
  ConnectionInfoToJSON,
  ConnectionInfoV2FromJSON,
  ConnectionInfoV2FromJSONTyped,
  ConnectionInfoV2StatusEnum,
  ConnectionInfoV2ToJSON,
  ContainerPortFromJSON,
  ContainerPortFromJSONTyped,
  ContainerPortToJSON,
  CreateLobbyRequestFromJSON,
  CreateLobbyRequestFromJSONTyped,
  CreateLobbyRequestToJSON,
  CreatePrivateLobbyRequestFromJSON,
  CreatePrivateLobbyRequestFromJSONTyped,
  CreatePrivateLobbyRequestToJSON,
  CreateRoomRequestFromJSON,
  CreateRoomRequestFromJSONTyped,
  CreateRoomRequestToJSON,
  CustomerPortalUrlFromJSON,
  CustomerPortalUrlFromJSONTyped,
  CustomerPortalUrlToJSON,
  DefaultConfig,
  DeploymentConfigFromJSON,
  DeploymentConfigFromJSONTyped,
  DeploymentConfigToJSON,
  DeploymentEnvInnerFromJSON,
  DeploymentEnvInnerFromJSONTyped,
  DeploymentEnvInnerToJSON,
  DeploymentFromJSON,
  DeploymentFromJSONTyped,
  DeploymentToJSON,
  DeploymentTransportTypeEnum,
  DeploymentV1Api,
  DiscoveryResponseInnerFromJSON,
  DiscoveryResponseInnerFromJSONTyped,
  DiscoveryResponseInnerToJSON,
  DiscoveryV1Api,
  ExposedPortFromJSON,
  ExposedPortFromJSONTyped,
  ExposedPortToJSON,
  FetchError,
  InvoiceFromJSON,
  InvoiceFromJSONTyped,
  InvoiceStatusEnum,
  InvoiceToJSON,
  JSONApiResponse,
  LinkPaymentMethodFromJSON,
  LinkPaymentMethodFromJSONTyped,
  LinkPaymentMethodToJSON,
  LobbyFromJSON,
  LobbyFromJSONTyped,
  LobbyToJSON,
  LobbyV1Api,
  LobbyV2Api,
  LobbyVisibility,
  LobbyVisibilityFromJSON,
  LobbyVisibilityFromJSONTyped,
  LobbyVisibilityToJSON,
  LogV1Api,
  LoginGoogleRequestFromJSON,
  LoginGoogleRequestFromJSONTyped,
  LoginGoogleRequestToJSON,
  LoginNicknameRequestFromJSON,
  LoginNicknameRequestFromJSONTyped,
  LoginNicknameRequestToJSON,
  LoginResponseFromJSON,
  LoginResponseFromJSONTyped,
  LoginResponseToJSON,
  ManagementV1Api,
  MetricName,
  MetricNameFromJSON,
  MetricNameFromJSONTyped,
  MetricNameToJSON,
  MetricValueFromJSON,
  MetricValueFromJSONTyped,
  MetricValueToJSON,
  MetricsV1Api,
  PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethodFromJSON,
  PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethodFromJSONTyped,
  PartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethodToJSON,
  PickRoomExcludeKeyofRoomAllocationsFromJSON,
  PickRoomExcludeKeyofRoomAllocationsFromJSONTyped,
  PickRoomExcludeKeyofRoomAllocationsToJSON,
  PlanName,
  PlanNameFromJSON,
  PlanNameFromJSONTyped,
  PlanNameToJSON,
  ProcessFromJSON,
  ProcessFromJSONTyped,
  ProcessToJSON,
  ProcessWithRoomsAllOfFromJSON,
  ProcessWithRoomsAllOfFromJSONTyped,
  ProcessWithRoomsAllOfToJSON,
  ProcessWithRoomsFromJSON,
  ProcessWithRoomsFromJSONTyped,
  ProcessWithRoomsToJSON,
  ProcessesV1Api,
  RecordPartialMetricNameMetricValueArrayFromJSON,
  RecordPartialMetricNameMetricValueArrayFromJSONTyped,
  RecordPartialMetricNameMetricValueArrayToJSON,
  Region,
  RegionFromJSON,
  RegionFromJSONTyped,
  RegionToJSON,
  RequiredError,
  ResponseError,
  RoomAllocationFromJSON,
  RoomAllocationFromJSONTyped,
  RoomAllocationToJSON,
  RoomFromJSON,
  RoomFromJSONTyped,
  RoomStatus,
  RoomStatusFromJSON,
  RoomStatusFromJSONTyped,
  RoomStatusToJSON,
  RoomToJSON,
  RoomV1Api,
  RoomV2Api,
  SetLobbyStateRequestFromJSON,
  SetLobbyStateRequestFromJSONTyped,
  SetLobbyStateRequestToJSON,
  StartingConnectionInfoFromJSON,
  StartingConnectionInfoFromJSONTyped,
  StartingConnectionInfoStatusEnum,
  StartingConnectionInfoToJSON,
  TextApiResponse,
  TransportType,
  TransportTypeFromJSON,
  TransportTypeFromJSONTyped,
  TransportTypeToJSON,
  VerificationEmailRequestFromJSON,
  VerificationEmailRequestFromJSONTyped,
  VerificationEmailRequestToJSON,
  VerificationEmailResponseFromJSON,
  VerificationEmailResponseFromJSONTyped,
  VerificationEmailResponseStatusEnum,
  VerificationEmailResponseToJSON,
  VoidApiResponse,
  canConsumeForm,
  exists,
  instanceOfAchPaymentMethod,
  instanceOfActiveConnectionInfo,
  instanceOfAppConfig,
  instanceOfAppConfigAuthConfiguration,
  instanceOfApplication,
  instanceOfApplicationAuthConfiguration,
  instanceOfApplicationAuthConfigurationGoogle,
  instanceOfApplicationWithDeployment,
  instanceOfApplicationWithDeploymentAllOf,
  instanceOfBuild,
  instanceOfBuildRegionalContainerTagsInner,
  instanceOfCardPaymentMethod,
  instanceOfConnectionInfo,
  instanceOfConnectionInfoV2,
  instanceOfContainerPort,
  instanceOfCreateLobbyRequest,
  instanceOfCreatePrivateLobbyRequest,
  instanceOfCreateRoomRequest,
  instanceOfCustomerPortalUrl,
  instanceOfDeployment,
  instanceOfDeploymentConfig,
  instanceOfDeploymentEnvInner,
  instanceOfDiscoveryResponseInner,
  instanceOfExposedPort,
  instanceOfInvoice,
  instanceOfLinkPaymentMethod,
  instanceOfLobby,
  instanceOfLoginGoogleRequest,
  instanceOfLoginNicknameRequest,
  instanceOfLoginResponse,
  instanceOfMetricValue,
  instanceOfPartialCardCardPaymentMethodAchAchPaymentMethodLinkLinkPaymentMethod,
  instanceOfPickRoomExcludeKeyofRoomAllocations,
  instanceOfProcess,
  instanceOfProcessWithRooms,
  instanceOfProcessWithRoomsAllOf,
  instanceOfRecordPartialMetricNameMetricValueArray,
  instanceOfRoom,
  instanceOfRoomAllocation,
  instanceOfSetLobbyStateRequest,
  instanceOfStartingConnectionInfo,
  instanceOfVerificationEmailRequest,
  instanceOfVerificationEmailResponse,
  mapValues,
  querystring
};
//# sourceMappingURL=@hathora_hathora-cloud-sdk.js.map

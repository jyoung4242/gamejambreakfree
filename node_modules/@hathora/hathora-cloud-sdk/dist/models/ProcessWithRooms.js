"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessWithRoomsToJSON = exports.ProcessWithRoomsFromJSONTyped = exports.ProcessWithRoomsFromJSON = exports.instanceOfProcessWithRooms = void 0;
const runtime_1 = require("../runtime");
const ExposedPort_1 = require("./ExposedPort");
const PickRoomExcludeKeyofRoomAllocations_1 = require("./PickRoomExcludeKeyofRoomAllocations");
const Region_1 = require("./Region");
/**
 * Check if a given object implements the ProcessWithRooms interface.
 */
function instanceOfProcessWithRooms(value) {
    let isInstance = true;
    isInstance = isInstance && "egressedBytes" in value;
    isInstance = isInstance && "idleSince" in value;
    isInstance = isInstance && "activeConnectionsUpdatedAt" in value;
    isInstance = isInstance && "activeConnections" in value;
    isInstance = isInstance && "roomSlotsAvailableUpdatedAt" in value;
    isInstance = isInstance && "roomSlotsAvailable" in value;
    isInstance = isInstance && "draining" in value;
    isInstance = isInstance && "terminatedAt" in value;
    isInstance = isInstance && "stoppingAt" in value;
    isInstance = isInstance && "startedAt" in value;
    isInstance = isInstance && "startingAt" in value;
    isInstance = isInstance && "roomsPerProcess" in value;
    isInstance = isInstance && "additionalExposedPorts" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "region" in value;
    isInstance = isInstance && "processId" in value;
    isInstance = isInstance && "deploymentId" in value;
    isInstance = isInstance && "appId" in value;
    isInstance = isInstance && "rooms" in value;
    isInstance = isInstance && "totalRooms" in value;
    return isInstance;
}
exports.instanceOfProcessWithRooms = instanceOfProcessWithRooms;
function ProcessWithRoomsFromJSON(json) {
    return ProcessWithRoomsFromJSONTyped(json, false);
}
exports.ProcessWithRoomsFromJSON = ProcessWithRoomsFromJSON;
function ProcessWithRoomsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'egressedBytes': json['egressedBytes'],
        'idleSince': (json['idleSince'] === null ? null : new Date(json['idleSince'])),
        'activeConnectionsUpdatedAt': (new Date(json['activeConnectionsUpdatedAt'])),
        'activeConnections': json['activeConnections'],
        'roomSlotsAvailableUpdatedAt': (new Date(json['roomSlotsAvailableUpdatedAt'])),
        'roomSlotsAvailable': json['roomSlotsAvailable'],
        'draining': json['draining'],
        'terminatedAt': (json['terminatedAt'] === null ? null : new Date(json['terminatedAt'])),
        'stoppingAt': (json['stoppingAt'] === null ? null : new Date(json['stoppingAt'])),
        'startedAt': (json['startedAt'] === null ? null : new Date(json['startedAt'])),
        'startingAt': (new Date(json['startingAt'])),
        'roomsPerProcess': json['roomsPerProcess'],
        'additionalExposedPorts': (json['additionalExposedPorts'].map(ExposedPort_1.ExposedPortFromJSON)),
        'exposedPort': !(0, runtime_1.exists)(json, 'exposedPort') ? undefined : (0, ExposedPort_1.ExposedPortFromJSON)(json['exposedPort']),
        'port': json['port'],
        'host': json['host'],
        'region': (0, Region_1.RegionFromJSON)(json['region']),
        'processId': json['processId'],
        'deploymentId': json['deploymentId'],
        'appId': json['appId'],
        'rooms': (json['rooms'].map(PickRoomExcludeKeyofRoomAllocations_1.PickRoomExcludeKeyofRoomAllocationsFromJSON)),
        'totalRooms': json['totalRooms'],
    };
}
exports.ProcessWithRoomsFromJSONTyped = ProcessWithRoomsFromJSONTyped;
function ProcessWithRoomsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'egressedBytes': value.egressedBytes,
        'idleSince': (value.idleSince === null ? null : value.idleSince.toISOString()),
        'activeConnectionsUpdatedAt': (value.activeConnectionsUpdatedAt.toISOString()),
        'activeConnections': value.activeConnections,
        'roomSlotsAvailableUpdatedAt': (value.roomSlotsAvailableUpdatedAt.toISOString()),
        'roomSlotsAvailable': value.roomSlotsAvailable,
        'draining': value.draining,
        'terminatedAt': (value.terminatedAt === null ? null : value.terminatedAt.toISOString()),
        'stoppingAt': (value.stoppingAt === null ? null : value.stoppingAt.toISOString()),
        'startedAt': (value.startedAt === null ? null : value.startedAt.toISOString()),
        'startingAt': (value.startingAt.toISOString()),
        'roomsPerProcess': value.roomsPerProcess,
        'additionalExposedPorts': (value.additionalExposedPorts.map(ExposedPort_1.ExposedPortToJSON)),
        'exposedPort': (0, ExposedPort_1.ExposedPortToJSON)(value.exposedPort),
        'port': value.port,
        'host': value.host,
        'region': (0, Region_1.RegionToJSON)(value.region),
        'processId': value.processId,
        'deploymentId': value.deploymentId,
        'appId': value.appId,
        'rooms': (value.rooms.map(PickRoomExcludeKeyofRoomAllocations_1.PickRoomExcludeKeyofRoomAllocationsToJSON)),
        'totalRooms': value.totalRooms,
    };
}
exports.ProcessWithRoomsToJSON = ProcessWithRoomsToJSON;

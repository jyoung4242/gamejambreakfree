/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Process, ProcessWithRooms, Region } from '../models';
export interface GetProcessInfoRequest {
    appId: string;
    processId: string;
}
export interface GetRunningProcessesRequest {
    appId: string;
    region?: Region;
}
export interface GetStoppedProcessesRequest {
    appId: string;
    region?: Region;
}
/**
 * ProcessesV1Api - interface
 *
 * @export
 * @interface ProcessesV1ApiInterface
 */
export interface ProcessesV1ApiInterface {
    /**
     * Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     * @param {string} appId
     * @param {string} processId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1ApiInterface
     */
    getProcessInfoRaw(requestParameters: GetProcessInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Process>>;
    /**
     * Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getProcessInfo(appId: string, processId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Process>;
    /**
     * Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     * @param {string} appId
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1ApiInterface
     */
    getRunningProcessesRaw(requestParameters: GetRunningProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProcessWithRooms>>>;
    /**
     * Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getRunningProcesses(appId: string, region?: Region, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProcessWithRooms>>;
    /**
     * Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     * @param {string} appId
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1ApiInterface
     */
    getStoppedProcessesRaw(requestParameters: GetStoppedProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Process>>>;
    /**
     * Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getStoppedProcesses(appId: string, region?: Region, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Process>>;
}
/**
 *
 */
export declare class ProcessesV1Api extends runtime.BaseAPI implements ProcessesV1ApiInterface {
    /**
     * Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getProcessInfoRaw(requestParameters: GetProcessInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Process>>;
    /**
     * Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getProcessInfo(appId: string, processId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Process>;
    /**
     * Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getRunningProcessesRaw(requestParameters: GetRunningProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProcessWithRooms>>>;
    /**
     * Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getRunningProcesses(appId: string, region?: Region, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProcessWithRooms>>;
    /**
     * Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getStoppedProcessesRaw(requestParameters: GetStoppedProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Process>>>;
    /**
     * Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getStoppedProcesses(appId: string, region?: Region, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Process>>;
}

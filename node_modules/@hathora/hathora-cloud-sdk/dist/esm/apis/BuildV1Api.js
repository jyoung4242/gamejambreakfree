/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { BuildFromJSON, } from '../models';
/**
 *
 */
export class BuildV1Api extends runtime.BaseAPI {
    /**
     * Generate a new `buildId` for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. You need `buildId` to run a [build](https://hathora.dev/docs/concepts/hathora-entities#build).
     */
    createBuildRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createBuild.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/builds/v1/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => BuildFromJSON(jsonValue));
        });
    }
    /**
     * Generate a new `buildId` for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. You need `buildId` to run a [build](https://hathora.dev/docs/concepts/hathora-entities#build).
     */
    createBuild(appId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createBuildRaw({ appId: appId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `buildId`.
     */
    deleteBuildRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling deleteBuild.');
            }
            if (requestParameters.buildId === null || requestParameters.buildId === undefined) {
                throw new runtime.RequiredError('buildId', 'Required parameter requestParameters.buildId was null or undefined when calling deleteBuild.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/builds/v1/{appId}/delete/{buildId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"buildId"}}`, encodeURIComponent(String(requestParameters.buildId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `buildId`.
     */
    deleteBuild(appId, buildId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBuildRaw({ appId: appId, buildId: buildId }, initOverrides);
        });
    }
    /**
     * Get details for an existing [build](https://hathora.dev/docs/concepts/hathora-entities#build) using `appId` and `buildId`.
     */
    getBuildInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getBuildInfo.');
            }
            if (requestParameters.buildId === null || requestParameters.buildId === undefined) {
                throw new runtime.RequiredError('buildId', 'Required parameter requestParameters.buildId was null or undefined when calling getBuildInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/builds/v1/{appId}/info/{buildId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"buildId"}}`, encodeURIComponent(String(requestParameters.buildId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => BuildFromJSON(jsonValue));
        });
    }
    /**
     * Get details for an existing [build](https://hathora.dev/docs/concepts/hathora-entities#build) using `appId` and `buildId`.
     */
    getBuildInfo(appId, buildId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBuildInfoRaw({ appId: appId, buildId: buildId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns an array of [build](https://hathora.dev/docs/concepts/hathora-entities#build) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     */
    getBuildsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getBuilds.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/builds/v1/{appId}/list`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BuildFromJSON));
        });
    }
    /**
     * Returns an array of [build](https://hathora.dev/docs/concepts/hathora-entities#build) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     */
    getBuilds(appId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBuildsRaw({ appId: appId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Provide a tarball that will generate a container image for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Pass in `buildId` generated from Create Build.
     */
    runBuildRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling runBuild.');
            }
            if (requestParameters.buildId === null || requestParameters.buildId === undefined) {
                throw new runtime.RequiredError('buildId', 'Required parameter requestParameters.buildId was null or undefined when calling runBuild.');
            }
            if (requestParameters.file === null || requestParameters.file === undefined) {
                throw new runtime.RequiredError('file', 'Required parameter requestParameters.file was null or undefined when calling runBuild.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const consumes = [
                { contentType: 'multipart/form-data' },
            ];
            // @ts-ignore: canConsumeForm may be unused
            const canConsumeForm = runtime.canConsumeForm(consumes);
            let formParams;
            let useForm = false;
            // use FormData to transmit files using content-type "multipart/form-data"
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new URLSearchParams();
            }
            if (requestParameters.file !== undefined) {
                formParams.append('file', requestParameters.file);
            }
            const response = yield this.request({
                path: `/builds/v1/{appId}/run/{buildId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"buildId"}}`, encodeURIComponent(String(requestParameters.buildId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Provide a tarball that will generate a container image for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Pass in `buildId` generated from Create Build.
     */
    runBuild(appId, buildId, file, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.runBuildRaw({ appId: appId, buildId: buildId, file: file }, initOverrides);
            return yield response.value();
        });
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { ConnectionInfoV2FromJSON, CreateRoomRequestToJSON, PickRoomExcludeKeyofRoomAllocationsFromJSON, RoomFromJSON, } from '../models';
/**
 *
 */
export class RoomV2Api extends runtime.BaseAPI {
    /**
     * Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `region`.
     */
    createRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createRoom.');
            }
            if (requestParameters.createRoomRequest === null || requestParameters.createRoomRequest === undefined) {
                throw new runtime.RequiredError('createRoomRequest', 'Required parameter requestParameters.createRoomRequest was null or undefined when calling createRoom.');
            }
            const queryParameters = {};
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v2/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateRoomRequestToJSON(requestParameters.createRoomRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionInfoV2FromJSON(jsonValue));
        });
    }
    /**
     * Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId` and `region`.
     */
    createRoom(appId, createRoomRequest, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRoomRaw({ appId: appId, createRoomRequest: createRoomRequest, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. All associated metadata is deleted.
     */
    destroyRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling destroyRoom.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling destroyRoom.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v2/{appId}/destroy/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. All associated metadata is deleted.
     */
    destroyRoom(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.destroyRoomRaw({ appId: appId, roomId: roomId }, initOverrides);
        });
    }
    /**
     * Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getActiveRoomsForProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getActiveRoomsForProcess.');
            }
            if (requestParameters.processId === null || requestParameters.processId === undefined) {
                throw new runtime.RequiredError('processId', 'Required parameter requestParameters.processId was null or undefined when calling getActiveRoomsForProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v2/{appId}/list/{processId}/active`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PickRoomExcludeKeyofRoomAllocationsFromJSON));
        });
    }
    /**
     * Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getActiveRoomsForProcess(appId, processId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getActiveRoomsForProcessRaw({ appId: appId, processId: processId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. Clients can call this endpoint without authentication.
     */
    getConnectionInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getConnectionInfo.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling getConnectionInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/rooms/v2/{appId}/connectioninfo/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionInfoV2FromJSON(jsonValue));
        });
    }
    /**
     * Get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. Clients can call this endpoint without authentication.
     */
    getConnectionInfo(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConnectionInfoRaw({ appId: appId, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getInactiveRoomsForProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getInactiveRoomsForProcess.');
            }
            if (requestParameters.processId === null || requestParameters.processId === undefined) {
                throw new runtime.RequiredError('processId', 'Required parameter requestParameters.processId was null or undefined when calling getInactiveRoomsForProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v2/{appId}/list/{processId}/inactive`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PickRoomExcludeKeyofRoomAllocationsFromJSON));
        });
    }
    /**
     * Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getInactiveRoomsForProcess(appId, processId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInactiveRoomsForProcessRaw({ appId: appId, processId: processId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get details for an existing [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`.
     */
    getRoomInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getRoomInfo.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling getRoomInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v2/{appId}/info/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
        });
    }
    /**
     * Get details for an existing [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`.
     */
    getRoomInfo(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomInfoRaw({ appId: appId, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     */
    suspendRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling suspendRoom.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling suspendRoom.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v2/{appId}/suspend/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room) using `appId` and `roomId`. The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     */
    suspendRoom(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.suspendRoomRaw({ appId: appId, roomId: roomId }, initOverrides);
        });
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { ProcessFromJSON, ProcessWithRoomsFromJSON, } from '../models';
/**
 *
 */
export class ProcessesV1Api extends runtime.BaseAPI {
    /**
     * Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getProcessInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getProcessInfo.');
            }
            if (requestParameters.processId === null || requestParameters.processId === undefined) {
                throw new runtime.RequiredError('processId', 'Required parameter requestParameters.processId was null or undefined when calling getProcessInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/processes/v1/{appId}/info/{processId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProcessFromJSON(jsonValue));
        });
    }
    /**
     * Get details for an existing [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     */
    getProcessInfo(appId, processId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getProcessInfoRaw({ appId: appId, processId: processId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getRunningProcessesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getRunningProcesses.');
            }
            const queryParameters = {};
            if (requestParameters.region !== undefined) {
                queryParameters['region'] = requestParameters.region;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/processes/v1/{appId}/list/running`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessWithRoomsFromJSON));
        });
    }
    /**
     * Returns an array of active [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getRunningProcesses(appId, region, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRunningProcessesRaw({ appId: appId, region: region }, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getStoppedProcessesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getStoppedProcesses.');
            }
            const queryParameters = {};
            if (requestParameters.region !== undefined) {
                queryParameters['region'] = requestParameters.region;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/processes/v1/{appId}/list/stopped`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessFromJSON));
        });
    }
    /**
     * Returns an array of stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a region.
     */
    getStoppedProcesses(appId, region, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStoppedProcessesRaw({ appId: appId, region: region }, initOverrides);
            return yield response.value();
        });
    }
}

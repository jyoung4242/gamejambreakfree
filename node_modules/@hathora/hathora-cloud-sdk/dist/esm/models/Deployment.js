/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ContainerPortFromJSON, ContainerPortToJSON, } from './ContainerPort';
import { DeploymentEnvInnerFromJSON, DeploymentEnvInnerToJSON, } from './DeploymentEnvInner';
import { PlanNameFromJSON, PlanNameToJSON, } from './PlanName';
/**
 * @export
 */
export const DeploymentTransportTypeEnum = {
    Tcp: 'tcp',
    Udp: 'udp',
    Tls: 'tls'
};
/**
 * Check if a given object implements the Deployment interface.
 */
export function instanceOfDeployment(value) {
    let isInstance = true;
    isInstance = isInstance && "env" in value;
    isInstance = isInstance && "roomsPerProcess" in value;
    isInstance = isInstance && "planName" in value;
    isInstance = isInstance && "additionalContainerPorts" in value;
    isInstance = isInstance && "defaultContainerPort" in value;
    isInstance = isInstance && "transportType" in value;
    isInstance = isInstance && "containerPort" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "requestedMemoryMB" in value;
    isInstance = isInstance && "requestedCPU" in value;
    isInstance = isInstance && "deploymentId" in value;
    isInstance = isInstance && "buildId" in value;
    isInstance = isInstance && "appId" in value;
    return isInstance;
}
export function DeploymentFromJSON(json) {
    return DeploymentFromJSONTyped(json, false);
}
export function DeploymentFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'env': (json['env'].map(DeploymentEnvInnerFromJSON)),
        'roomsPerProcess': json['roomsPerProcess'],
        'planName': PlanNameFromJSON(json['planName']),
        'additionalContainerPorts': (json['additionalContainerPorts'].map(ContainerPortFromJSON)),
        'defaultContainerPort': ContainerPortFromJSON(json['defaultContainerPort']),
        'transportType': json['transportType'],
        'containerPort': json['containerPort'],
        'createdAt': (new Date(json['createdAt'])),
        'createdBy': json['createdBy'],
        'requestedMemoryMB': json['requestedMemoryMB'],
        'requestedCPU': json['requestedCPU'],
        'deploymentId': json['deploymentId'],
        'buildId': json['buildId'],
        'appId': json['appId'],
    };
}
export function DeploymentToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'env': (value.env.map(DeploymentEnvInnerToJSON)),
        'roomsPerProcess': value.roomsPerProcess,
        'planName': PlanNameToJSON(value.planName),
        'additionalContainerPorts': (value.additionalContainerPorts.map(ContainerPortToJSON)),
        'defaultContainerPort': ContainerPortToJSON(value.defaultContainerPort),
        'transportType': value.transportType,
        'containerPort': value.containerPort,
        'createdAt': (value.createdAt.toISOString()),
        'createdBy': value.createdBy,
        'requestedMemoryMB': value.requestedMemoryMB,
        'requestedCPU': value.requestedCPU,
        'deploymentId': value.deploymentId,
        'buildId': value.buildId,
        'appId': value.appId,
    };
}

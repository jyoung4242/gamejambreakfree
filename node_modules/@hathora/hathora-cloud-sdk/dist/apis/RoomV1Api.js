"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Hathora Cloud API
 * Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomV1Api = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class RoomV1Api extends runtime.BaseAPI {
    /**
     */
    createRoomDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling createRoomDeprecated.');
            }
            if (requestParameters.createRoomRequest === null || requestParameters.createRoomRequest === undefined) {
                throw new runtime.RequiredError('createRoomRequest', 'Required parameter requestParameters.createRoomRequest was null or undefined when calling createRoomDeprecated.');
            }
            const queryParameters = {};
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v1/{appId}/create`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CreateRoomRequestToJSON)(requestParameters.createRoomRequest),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     */
    createRoomDeprecated(appId, createRoomRequest, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRoomDeprecatedRaw({ appId: appId, createRoomRequest: createRoomRequest, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    destroyRoomDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling destroyRoomDeprecated.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling destroyRoomDeprecated.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v1/{appId}/destroy/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    destroyRoomDeprecated(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.destroyRoomDeprecatedRaw({ appId: appId, roomId: roomId }, initOverrides);
        });
    }
    /**
     */
    getActiveRoomsForProcessDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getActiveRoomsForProcessDeprecated.');
            }
            if (requestParameters.processId === null || requestParameters.processId === undefined) {
                throw new runtime.RequiredError('processId', 'Required parameter requestParameters.processId was null or undefined when calling getActiveRoomsForProcessDeprecated.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v1/{appId}/list/{processId}/active`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.PickRoomExcludeKeyofRoomAllocationsFromJSON));
        });
    }
    /**
     */
    getActiveRoomsForProcessDeprecated(appId, processId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getActiveRoomsForProcessDeprecatedRaw({ appId: appId, processId: processId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    getConnectionInfoDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getConnectionInfoDeprecated.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling getConnectionInfoDeprecated.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/rooms/v1/{appId}/connectioninfo/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConnectionInfoFromJSON)(jsonValue));
        });
    }
    /**
     */
    getConnectionInfoDeprecated(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConnectionInfoDeprecatedRaw({ appId: appId, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    getInactiveRoomsForProcessDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getInactiveRoomsForProcessDeprecated.');
            }
            if (requestParameters.processId === null || requestParameters.processId === undefined) {
                throw new runtime.RequiredError('processId', 'Required parameter requestParameters.processId was null or undefined when calling getInactiveRoomsForProcessDeprecated.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v1/{appId}/list/{processId}/inactive`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.PickRoomExcludeKeyofRoomAllocationsFromJSON));
        });
    }
    /**
     */
    getInactiveRoomsForProcessDeprecated(appId, processId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInactiveRoomsForProcessDeprecatedRaw({ appId: appId, processId: processId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    getRoomInfoDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling getRoomInfoDeprecated.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling getRoomInfoDeprecated.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v1/{appId}/info/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomFromJSON)(jsonValue));
        });
    }
    /**
     */
    getRoomInfoDeprecated(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomInfoDeprecatedRaw({ appId: appId, roomId: roomId }, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    suspendRoomDeprecatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appId === null || requestParameters.appId === undefined) {
                throw new runtime.RequiredError('appId', 'Required parameter requestParameters.appId was null or undefined when calling suspendRoomDeprecated.');
            }
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling suspendRoomDeprecated.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("auth0", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/rooms/v1/{appId}/suspend/{roomId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    suspendRoomDeprecated(appId, roomId, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.suspendRoomDeprecatedRaw({ appId: appId, roomId: roomId }, initOverrides);
        });
    }
}
exports.RoomV1Api = RoomV1Api;
